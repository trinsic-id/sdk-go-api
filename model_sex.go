/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// Sex the model 'Sex'
type Sex string

// List of Sex
const (
	SEX_UNKNOWN Sex = "Unknown"
	SEX_NOT_APPLICABLE Sex = "NotApplicable"
	SEX_MALE Sex = "Male"
	SEX_FEMALE Sex = "Female"
)

// All allowed values of Sex enum
var AllowedSexEnumValues = []Sex{
	"Unknown",
	"NotApplicable",
	"Male",
	"Female",
}

func (v *Sex) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Sex(value)
	for _, existing := range AllowedSexEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Sex", value)
}

// NewSexFromValue returns a pointer to a valid Sex
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSexFromValue(v string) (*Sex, error) {
	ev := Sex(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Sex: valid values are %v", v, AllowedSexEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Sex) IsValid() bool {
	for _, existing := range AllowedSexEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Sex value
func (v Sex) Ptr() *Sex {
	return &v
}

type NullableSex struct {
	value *Sex
	isSet bool
}

func (v NullableSex) Get() *Sex {
	return v.value
}

func (v *NullableSex) Set(val *Sex) {
	v.value = val
	v.isSet = true
}

func (v NullableSex) IsSet() bool {
	return v.isSet
}

func (v *NullableSex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSex(val *Sex) *NullableSex {
	return &NullableSex{value: val, isSet: true}
}

func (v NullableSex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

