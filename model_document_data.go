/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the DocumentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentData{}

// DocumentData struct for DocumentData
type DocumentData struct {
	Type NullableDocumentType `json:"type,omitempty"`
	Number NullableString `json:"number,omitempty"`
	IssueDate NullableString `json:"issueDate,omitempty"`
	ExpirationDate NullableString `json:"expirationDate,omitempty"`
	IssuingCountry NullableString `json:"issuingCountry,omitempty"`
	IssuingAuthority NullableString `json:"issuingAuthority,omitempty"`
}

// NewDocumentData instantiates a new DocumentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentData() *DocumentData {
	this := DocumentData{}
	return &this
}

// NewDocumentDataWithDefaults instantiates a new DocumentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDataWithDefaults() *DocumentData {
	this := DocumentData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetType() DocumentType {
	if o == nil || IsNil(o.Type.Get()) {
		var ret DocumentType
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetTypeOk() (*DocumentType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DocumentData) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableDocumentType and assigns it to the Type field.
func (o *DocumentData) SetType(v DocumentType) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DocumentData) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DocumentData) UnsetType() {
	o.Type.Unset()
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetNumber() string {
	if o == nil || IsNil(o.Number.Get()) {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *DocumentData) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *DocumentData) SetNumber(v string) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *DocumentData) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *DocumentData) UnsetNumber() {
	o.Number.Unset()
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate.Get()) {
		var ret string
		return ret
	}
	return *o.IssueDate.Get()
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetIssueDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueDate.Get(), o.IssueDate.IsSet()
}

// HasIssueDate returns a boolean if a field has been set.
func (o *DocumentData) HasIssueDate() bool {
	if o != nil && o.IssueDate.IsSet() {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given NullableString and assigns it to the IssueDate field.
func (o *DocumentData) SetIssueDate(v string) {
	o.IssueDate.Set(&v)
}
// SetIssueDateNil sets the value for IssueDate to be an explicit nil
func (o *DocumentData) SetIssueDateNil() {
	o.IssueDate.Set(nil)
}

// UnsetIssueDate ensures that no value is present for IssueDate, not even an explicit nil
func (o *DocumentData) UnsetIssueDate() {
	o.IssueDate.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate.Get()) {
		var ret string
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *DocumentData) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableString and assigns it to the ExpirationDate field.
func (o *DocumentData) SetExpirationDate(v string) {
	o.ExpirationDate.Set(&v)
}
// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *DocumentData) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *DocumentData) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

// GetIssuingCountry returns the IssuingCountry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetIssuingCountry() string {
	if o == nil || IsNil(o.IssuingCountry.Get()) {
		var ret string
		return ret
	}
	return *o.IssuingCountry.Get()
}

// GetIssuingCountryOk returns a tuple with the IssuingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetIssuingCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuingCountry.Get(), o.IssuingCountry.IsSet()
}

// HasIssuingCountry returns a boolean if a field has been set.
func (o *DocumentData) HasIssuingCountry() bool {
	if o != nil && o.IssuingCountry.IsSet() {
		return true
	}

	return false
}

// SetIssuingCountry gets a reference to the given NullableString and assigns it to the IssuingCountry field.
func (o *DocumentData) SetIssuingCountry(v string) {
	o.IssuingCountry.Set(&v)
}
// SetIssuingCountryNil sets the value for IssuingCountry to be an explicit nil
func (o *DocumentData) SetIssuingCountryNil() {
	o.IssuingCountry.Set(nil)
}

// UnsetIssuingCountry ensures that no value is present for IssuingCountry, not even an explicit nil
func (o *DocumentData) UnsetIssuingCountry() {
	o.IssuingCountry.Unset()
}

// GetIssuingAuthority returns the IssuingAuthority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentData) GetIssuingAuthority() string {
	if o == nil || IsNil(o.IssuingAuthority.Get()) {
		var ret string
		return ret
	}
	return *o.IssuingAuthority.Get()
}

// GetIssuingAuthorityOk returns a tuple with the IssuingAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentData) GetIssuingAuthorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuingAuthority.Get(), o.IssuingAuthority.IsSet()
}

// HasIssuingAuthority returns a boolean if a field has been set.
func (o *DocumentData) HasIssuingAuthority() bool {
	if o != nil && o.IssuingAuthority.IsSet() {
		return true
	}

	return false
}

// SetIssuingAuthority gets a reference to the given NullableString and assigns it to the IssuingAuthority field.
func (o *DocumentData) SetIssuingAuthority(v string) {
	o.IssuingAuthority.Set(&v)
}
// SetIssuingAuthorityNil sets the value for IssuingAuthority to be an explicit nil
func (o *DocumentData) SetIssuingAuthorityNil() {
	o.IssuingAuthority.Set(nil)
}

// UnsetIssuingAuthority ensures that no value is present for IssuingAuthority, not even an explicit nil
func (o *DocumentData) UnsetIssuingAuthority() {
	o.IssuingAuthority.Unset()
}

func (o DocumentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.IssueDate.IsSet() {
		toSerialize["issueDate"] = o.IssueDate.Get()
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expirationDate"] = o.ExpirationDate.Get()
	}
	if o.IssuingCountry.IsSet() {
		toSerialize["issuingCountry"] = o.IssuingCountry.Get()
	}
	if o.IssuingAuthority.IsSet() {
		toSerialize["issuingAuthority"] = o.IssuingAuthority.Get()
	}
	return toSerialize, nil
}

type NullableDocumentData struct {
	value *DocumentData
	isSet bool
}

func (v NullableDocumentData) Get() *DocumentData {
	return v.value
}

func (v *NullableDocumentData) Set(val *DocumentData) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentData) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentData(val *DocumentData) *NullableDocumentData {
	return &NullableDocumentData{value: val, isSet: true}
}

func (v NullableDocumentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


