/*
Trinsic API

Testing SessionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package trinsic_api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_trinsic_api_SessionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SessionsAPIService CancelSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		resp, httpRes, err := apiClient.SessionsAPI.CancelSession(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService CreateAdvancedProviderSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsAPI.CreateAdvancedProviderSession(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService CreateHostedProviderSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsAPI.CreateHostedProviderSession(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService CreateWidgetSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsAPI.CreateWidgetSession(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService GetSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		resp, httpRes, err := apiClient.SessionsAPI.GetSession(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService GetSessionResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		resp, httpRes, err := apiClient.SessionsAPI.GetSessionResult(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService ListSessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsAPI.ListSessions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService RedactSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string

		httpRes, err := apiClient.SessionsAPI.RedactSession(context.Background(), sessionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsAPIService RefreshStepContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var acceptanceSessionId string

		resp, httpRes, err := apiClient.SessionsAPI.RefreshStepContent(context.Background(), acceptanceSessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
