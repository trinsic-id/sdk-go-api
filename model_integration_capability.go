/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// IntegrationCapability the model 'IntegrationCapability'
type IntegrationCapability string

// List of IntegrationCapability
const (
	INTEGRATIONCAPABILITY_LAUNCH_BROWSER IntegrationCapability = "LaunchBrowser"
	INTEGRATIONCAPABILITY_DEEPLINK_TO_MOBILE IntegrationCapability = "DeeplinkToMobile"
	INTEGRATIONCAPABILITY_SHOW_CONTENT IntegrationCapability = "ShowContent"
	INTEGRATIONCAPABILITY_REFRESH_STEP_CONTENT IntegrationCapability = "RefreshStepContent"
	INTEGRATIONCAPABILITY_CAPTURE_REDIRECT IntegrationCapability = "CaptureRedirect"
	INTEGRATIONCAPABILITY_POLL_RESULT IntegrationCapability = "PollResult"
	INTEGRATIONCAPABILITY_POLL_AFTER_REDIRECT IntegrationCapability = "PollAfterRedirect"
)

// All allowed values of IntegrationCapability enum
var AllowedIntegrationCapabilityEnumValues = []IntegrationCapability{
	"LaunchBrowser",
	"DeeplinkToMobile",
	"ShowContent",
	"RefreshStepContent",
	"CaptureRedirect",
	"PollResult",
	"PollAfterRedirect",
}

func (v *IntegrationCapability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationCapability(value)
	for _, existing := range AllowedIntegrationCapabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationCapability", value)
}

// NewIntegrationCapabilityFromValue returns a pointer to a valid IntegrationCapability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationCapabilityFromValue(v string) (*IntegrationCapability, error) {
	ev := IntegrationCapability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationCapability: valid values are %v", v, AllowedIntegrationCapabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationCapability) IsValid() bool {
	for _, existing := range AllowedIntegrationCapabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationCapability value
func (v IntegrationCapability) Ptr() *IntegrationCapability {
	return &v
}

type NullableIntegrationCapability struct {
	value *IntegrationCapability
	isSet bool
}

func (v NullableIntegrationCapability) Get() *IntegrationCapability {
	return v.value
}

func (v *NullableIntegrationCapability) Set(val *IntegrationCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationCapability(val *IntegrationCapability) *NullableIntegrationCapability {
	return &NullableIntegrationCapability{value: val, isSet: true}
}

func (v NullableIntegrationCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

