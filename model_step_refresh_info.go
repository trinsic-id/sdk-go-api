/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StepRefreshInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StepRefreshInfo{}

// StepRefreshInfo struct for StepRefreshInfo
type StepRefreshInfo struct {
	// The UTC date/time at which the step `content` will expire and should no longer be used.              Use the `Refresh Step Content` API to obtain a new value for `content`.
	ExpiresAt time.Time `json:"expiresAt"`
	// The UTC date/time after which Trinsic recommends you refresh the step `content`.
	RefreshAfter time.Time `json:"refreshAfter"`
	// The total lifetime of the step `content`.
	TimeToLiveSeconds int32 `json:"timeToLiveSeconds"`
}

type _StepRefreshInfo StepRefreshInfo

// NewStepRefreshInfo instantiates a new StepRefreshInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStepRefreshInfo(expiresAt time.Time, refreshAfter time.Time, timeToLiveSeconds int32) *StepRefreshInfo {
	this := StepRefreshInfo{}
	this.ExpiresAt = expiresAt
	this.RefreshAfter = refreshAfter
	this.TimeToLiveSeconds = timeToLiveSeconds
	return &this
}

// NewStepRefreshInfoWithDefaults instantiates a new StepRefreshInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStepRefreshInfoWithDefaults() *StepRefreshInfo {
	this := StepRefreshInfo{}
	return &this
}

// GetExpiresAt returns the ExpiresAt field value
func (o *StepRefreshInfo) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *StepRefreshInfo) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *StepRefreshInfo) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetRefreshAfter returns the RefreshAfter field value
func (o *StepRefreshInfo) GetRefreshAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RefreshAfter
}

// GetRefreshAfterOk returns a tuple with the RefreshAfter field value
// and a boolean to check if the value has been set.
func (o *StepRefreshInfo) GetRefreshAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefreshAfter, true
}

// SetRefreshAfter sets field value
func (o *StepRefreshInfo) SetRefreshAfter(v time.Time) {
	o.RefreshAfter = v
}

// GetTimeToLiveSeconds returns the TimeToLiveSeconds field value
func (o *StepRefreshInfo) GetTimeToLiveSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TimeToLiveSeconds
}

// GetTimeToLiveSecondsOk returns a tuple with the TimeToLiveSeconds field value
// and a boolean to check if the value has been set.
func (o *StepRefreshInfo) GetTimeToLiveSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeToLiveSeconds, true
}

// SetTimeToLiveSeconds sets field value
func (o *StepRefreshInfo) SetTimeToLiveSeconds(v int32) {
	o.TimeToLiveSeconds = v
}

func (o StepRefreshInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StepRefreshInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expiresAt"] = o.ExpiresAt
	toSerialize["refreshAfter"] = o.RefreshAfter
	toSerialize["timeToLiveSeconds"] = o.TimeToLiveSeconds
	return toSerialize, nil
}

func (o *StepRefreshInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expiresAt",
		"refreshAfter",
		"timeToLiveSeconds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStepRefreshInfo := _StepRefreshInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStepRefreshInfo)

	if err != nil {
		return err
	}

	*o = StepRefreshInfo(varStepRefreshInfo)

	return err
}

type NullableStepRefreshInfo struct {
	value *StepRefreshInfo
	isSet bool
}

func (v NullableStepRefreshInfo) Get() *StepRefreshInfo {
	return v.value
}

func (v *NullableStepRefreshInfo) Set(val *StepRefreshInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStepRefreshInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStepRefreshInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepRefreshInfo(val *StepRefreshInfo) *NullableStepRefreshInfo {
	return &NullableStepRefreshInfo{value: val, isSet: true}
}

func (v NullableStepRefreshInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepRefreshInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


