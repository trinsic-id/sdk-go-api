/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProviderInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderInformation{}

// ProviderInformation struct for ProviderInformation
type ProviderInformation struct {
	ProviderId string `json:"providerId"`
	ProviderDisplayName string `json:"providerDisplayName"`
	ProviderLogo string `json:"providerLogo"`
}

type _ProviderInformation ProviderInformation

// NewProviderInformation instantiates a new ProviderInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderInformation(providerId string, providerDisplayName string, providerLogo string) *ProviderInformation {
	this := ProviderInformation{}
	this.ProviderId = providerId
	this.ProviderDisplayName = providerDisplayName
	this.ProviderLogo = providerLogo
	return &this
}

// NewProviderInformationWithDefaults instantiates a new ProviderInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderInformationWithDefaults() *ProviderInformation {
	this := ProviderInformation{}
	return &this
}

// GetProviderId returns the ProviderId field value
func (o *ProviderInformation) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *ProviderInformation) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *ProviderInformation) SetProviderId(v string) {
	o.ProviderId = v
}

// GetProviderDisplayName returns the ProviderDisplayName field value
func (o *ProviderInformation) GetProviderDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderDisplayName
}

// GetProviderDisplayNameOk returns a tuple with the ProviderDisplayName field value
// and a boolean to check if the value has been set.
func (o *ProviderInformation) GetProviderDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderDisplayName, true
}

// SetProviderDisplayName sets field value
func (o *ProviderInformation) SetProviderDisplayName(v string) {
	o.ProviderDisplayName = v
}

// GetProviderLogo returns the ProviderLogo field value
func (o *ProviderInformation) GetProviderLogo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderLogo
}

// GetProviderLogoOk returns a tuple with the ProviderLogo field value
// and a boolean to check if the value has been set.
func (o *ProviderInformation) GetProviderLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderLogo, true
}

// SetProviderLogo sets field value
func (o *ProviderInformation) SetProviderLogo(v string) {
	o.ProviderLogo = v
}

func (o ProviderInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerId"] = o.ProviderId
	toSerialize["providerDisplayName"] = o.ProviderDisplayName
	toSerialize["providerLogo"] = o.ProviderLogo
	return toSerialize, nil
}

func (o *ProviderInformation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerId",
		"providerDisplayName",
		"providerLogo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderInformation := _ProviderInformation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderInformation)

	if err != nil {
		return err
	}

	*o = ProviderInformation(varProviderInformation)

	return err
}

type NullableProviderInformation struct {
	value *ProviderInformation
	isSet bool
}

func (v NullableProviderInformation) Get() *ProviderInformation {
	return v.value
}

func (v *NullableProviderInformation) Set(val *ProviderInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderInformation(val *ProviderInformation) *NullableProviderInformation {
	return &NullableProviderInformation{value: val, isSet: true}
}

func (v NullableProviderInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


