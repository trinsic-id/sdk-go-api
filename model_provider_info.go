/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProviderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderInfo{}

// ProviderInfo A provider that can be specified when creating a `Session`
type ProviderInfo struct {
	// The ID of the provider
	Id string `json:"id"`
	// The friendly, human-readable name of the provider
	Name string `json:"name"`
	// A URL pointing to the provider's logo
	LogoUrl string `json:"logoUrl"`
}

type _ProviderInfo ProviderInfo

// NewProviderInfo instantiates a new ProviderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderInfo(id string, name string, logoUrl string) *ProviderInfo {
	this := ProviderInfo{}
	this.Id = id
	this.Name = name
	this.LogoUrl = logoUrl
	return &this
}

// NewProviderInfoWithDefaults instantiates a new ProviderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderInfoWithDefaults() *ProviderInfo {
	this := ProviderInfo{}
	return &this
}

// GetId returns the Id field value
func (o *ProviderInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProviderInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProviderInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProviderInfo) SetName(v string) {
	o.Name = v
}

// GetLogoUrl returns the LogoUrl field value
func (o *ProviderInfo) GetLogoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetLogoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoUrl, true
}

// SetLogoUrl sets field value
func (o *ProviderInfo) SetLogoUrl(v string) {
	o.LogoUrl = v
}

func (o ProviderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["logoUrl"] = o.LogoUrl
	return toSerialize, nil
}

func (o *ProviderInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"logoUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderInfo := _ProviderInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderInfo)

	if err != nil {
		return err
	}

	*o = ProviderInfo(varProviderInfo)

	return err
}

type NullableProviderInfo struct {
	value *ProviderInfo
	isSet bool
}

func (v NullableProviderInfo) Get() *ProviderInfo {
	return v.value
}

func (v *NullableProviderInfo) Set(val *ProviderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderInfo(val *ProviderInfo) *NullableProviderInfo {
	return &NullableProviderInfo{value: val, isSet: true}
}

func (v NullableProviderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


