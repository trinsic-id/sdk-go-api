/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProviderContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderContract{}

// ProviderContract struct for ProviderContract
type ProviderContract struct {
	// The ID of the Provider for this contract.
	Id string `json:"id"`
	// The Provider's Name as it appears in Trinsic's Dashboard and Widget
	Name string `json:"name"`
	// The Provider's subtext recommended to be shown next to the name.              This is flavor text, not a full, human-readable description of the provider.
	Subtext string `json:"subtext"`
	// The Provider's description as it appears in Trinsic's Widget.              This is flavor text, not a full, human-readable description of the provider.
	// Deprecated
	Description string `json:"description"`
	// A URL pointing to the Provider's logo on Trinsic's CDN.              May be a PNG, JPG, or SVG image.
	LogoUrl string `json:"logoUrl"`
	// Whether the Provider is available for use in your App.              If `false`, you will need to contact Trinsic to enable this Provider for your App.
	Available bool `json:"available"`
	// The geographies within the Regions the Provider is available.
	Geography []string `json:"geography"`
	// The regions within which the Provider is available.
	Regions []string `json:"regions"`
	// Relevant only to Advanced Provider Sessions.              The `LaunchMethod` which must be supported to launch the Provider Session in Advanced Provider Sessions.
	LaunchMethod IntegrationLaunchMethod `json:"launchMethod"`
	// Relevant only to Advanced Provider Sessions.              The `CollectionMethod` which must be supported to launch the Provider Session in Advanced Provider Sessions.
	CollectionMethod ResultCollectionMethod `json:"collectionMethod"`
	// If `true`, then the results for this Provider may not be available immediately after the user is redirected back to your application. In this case, the `GetSessionResults` API must be called until results are available.              This is an uncommon scenario, and only applies to Providers which cannot guarantee the availability of results immediately after the user is redirected back to your application.
	ResultsMayBeDelayedAfterRedirect bool `json:"resultsMayBeDelayedAfterRedirect"`
	// Relevant only to Advanced Provider Sessions.              Whether the Provider requires the `RefreshStepContent` capability.              For example, Samsung Wallet's deep links expire every 30 seconds, and must be refreshed periodically for a resilient user flow.
	HasRefreshableContent bool `json:"hasRefreshableContent"`
	// Relevant to Hosted Provider Sessions and Advanced Provider Sessions.              If `true`, this Provider requires provider-specific input on Session creation. If this input is not provided, Trinsic's Hosted UI will be invoked to collect the input from the user.
	RequiresInput bool `json:"requiresInput"`
	// Whether there exists a Trinsic-hosted UI for this Provider.              This is `true` for any Provider which is not a simple, OIDC-like redirect flow.
	HasTrinsicInterface bool `json:"hasTrinsicInterface"`
	// Whether this Provider can be fully whitelabeled/OEMed through the Advanced Provider Sessions API.              If `false`, the Provider may still be launched through Advanced Provider Sessions; however, it will necessarily require a Trinsic-hosted UI to function.
	SupportsAdvancedProviderSessions bool `json:"supportsAdvancedProviderSessions"`
	// Information about the fields that this Provider will return in verification results.
	AvailableFields []ContractField `json:"availableFields,omitempty"`
	// Metadata about the sub-providers which are available for this Provider.              For example, Italy's SPID is a Provider which aggregates access to multiple sub-providers.
	SubProviders []SubProviderMetadata `json:"subProviders,omitempty"`
	// The health for an integration to be able to successfully perform a verification session.
	Health ProviderHealth `json:"health"`
}

type _ProviderContract ProviderContract

// NewProviderContract instantiates a new ProviderContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderContract(id string, name string, subtext string, description string, logoUrl string, available bool, geography []string, regions []string, launchMethod IntegrationLaunchMethod, collectionMethod ResultCollectionMethod, resultsMayBeDelayedAfterRedirect bool, hasRefreshableContent bool, requiresInput bool, hasTrinsicInterface bool, supportsAdvancedProviderSessions bool, health ProviderHealth) *ProviderContract {
	this := ProviderContract{}
	this.Id = id
	this.Name = name
	this.Subtext = subtext
	this.Description = description
	this.LogoUrl = logoUrl
	this.Available = available
	this.Geography = geography
	this.Regions = regions
	this.LaunchMethod = launchMethod
	this.CollectionMethod = collectionMethod
	this.ResultsMayBeDelayedAfterRedirect = resultsMayBeDelayedAfterRedirect
	this.HasRefreshableContent = hasRefreshableContent
	this.RequiresInput = requiresInput
	this.HasTrinsicInterface = hasTrinsicInterface
	this.SupportsAdvancedProviderSessions = supportsAdvancedProviderSessions
	this.Health = health
	return &this
}

// NewProviderContractWithDefaults instantiates a new ProviderContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderContractWithDefaults() *ProviderContract {
	this := ProviderContract{}
	return &this
}

// GetId returns the Id field value
func (o *ProviderContract) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProviderContract) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProviderContract) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProviderContract) SetName(v string) {
	o.Name = v
}

// GetSubtext returns the Subtext field value
func (o *ProviderContract) GetSubtext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subtext
}

// GetSubtextOk returns a tuple with the Subtext field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetSubtextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subtext, true
}

// SetSubtext sets field value
func (o *ProviderContract) SetSubtext(v string) {
	o.Subtext = v
}

// GetDescription returns the Description field value
// Deprecated
func (o *ProviderContract) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *ProviderContract) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
// Deprecated
func (o *ProviderContract) SetDescription(v string) {
	o.Description = v
}

// GetLogoUrl returns the LogoUrl field value
func (o *ProviderContract) GetLogoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetLogoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogoUrl, true
}

// SetLogoUrl sets field value
func (o *ProviderContract) SetLogoUrl(v string) {
	o.LogoUrl = v
}

// GetAvailable returns the Available field value
func (o *ProviderContract) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *ProviderContract) SetAvailable(v bool) {
	o.Available = v
}

// GetGeography returns the Geography field value
func (o *ProviderContract) GetGeography() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Geography
}

// GetGeographyOk returns a tuple with the Geography field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetGeographyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geography, true
}

// SetGeography sets field value
func (o *ProviderContract) SetGeography(v []string) {
	o.Geography = v
}

// GetRegions returns the Regions field value
func (o *ProviderContract) GetRegions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetRegionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *ProviderContract) SetRegions(v []string) {
	o.Regions = v
}

// GetLaunchMethod returns the LaunchMethod field value
func (o *ProviderContract) GetLaunchMethod() IntegrationLaunchMethod {
	if o == nil {
		var ret IntegrationLaunchMethod
		return ret
	}

	return o.LaunchMethod
}

// GetLaunchMethodOk returns a tuple with the LaunchMethod field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetLaunchMethodOk() (*IntegrationLaunchMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LaunchMethod, true
}

// SetLaunchMethod sets field value
func (o *ProviderContract) SetLaunchMethod(v IntegrationLaunchMethod) {
	o.LaunchMethod = v
}

// GetCollectionMethod returns the CollectionMethod field value
func (o *ProviderContract) GetCollectionMethod() ResultCollectionMethod {
	if o == nil {
		var ret ResultCollectionMethod
		return ret
	}

	return o.CollectionMethod
}

// GetCollectionMethodOk returns a tuple with the CollectionMethod field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetCollectionMethodOk() (*ResultCollectionMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionMethod, true
}

// SetCollectionMethod sets field value
func (o *ProviderContract) SetCollectionMethod(v ResultCollectionMethod) {
	o.CollectionMethod = v
}

// GetResultsMayBeDelayedAfterRedirect returns the ResultsMayBeDelayedAfterRedirect field value
func (o *ProviderContract) GetResultsMayBeDelayedAfterRedirect() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ResultsMayBeDelayedAfterRedirect
}

// GetResultsMayBeDelayedAfterRedirectOk returns a tuple with the ResultsMayBeDelayedAfterRedirect field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetResultsMayBeDelayedAfterRedirectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultsMayBeDelayedAfterRedirect, true
}

// SetResultsMayBeDelayedAfterRedirect sets field value
func (o *ProviderContract) SetResultsMayBeDelayedAfterRedirect(v bool) {
	o.ResultsMayBeDelayedAfterRedirect = v
}

// GetHasRefreshableContent returns the HasRefreshableContent field value
func (o *ProviderContract) GetHasRefreshableContent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasRefreshableContent
}

// GetHasRefreshableContentOk returns a tuple with the HasRefreshableContent field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetHasRefreshableContentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasRefreshableContent, true
}

// SetHasRefreshableContent sets field value
func (o *ProviderContract) SetHasRefreshableContent(v bool) {
	o.HasRefreshableContent = v
}

// GetRequiresInput returns the RequiresInput field value
func (o *ProviderContract) GetRequiresInput() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RequiresInput
}

// GetRequiresInputOk returns a tuple with the RequiresInput field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetRequiresInputOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequiresInput, true
}

// SetRequiresInput sets field value
func (o *ProviderContract) SetRequiresInput(v bool) {
	o.RequiresInput = v
}

// GetHasTrinsicInterface returns the HasTrinsicInterface field value
func (o *ProviderContract) GetHasTrinsicInterface() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasTrinsicInterface
}

// GetHasTrinsicInterfaceOk returns a tuple with the HasTrinsicInterface field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetHasTrinsicInterfaceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasTrinsicInterface, true
}

// SetHasTrinsicInterface sets field value
func (o *ProviderContract) SetHasTrinsicInterface(v bool) {
	o.HasTrinsicInterface = v
}

// GetSupportsAdvancedProviderSessions returns the SupportsAdvancedProviderSessions field value
func (o *ProviderContract) GetSupportsAdvancedProviderSessions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportsAdvancedProviderSessions
}

// GetSupportsAdvancedProviderSessionsOk returns a tuple with the SupportsAdvancedProviderSessions field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetSupportsAdvancedProviderSessionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportsAdvancedProviderSessions, true
}

// SetSupportsAdvancedProviderSessions sets field value
func (o *ProviderContract) SetSupportsAdvancedProviderSessions(v bool) {
	o.SupportsAdvancedProviderSessions = v
}

// GetAvailableFields returns the AvailableFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProviderContract) GetAvailableFields() []ContractField {
	if o == nil {
		var ret []ContractField
		return ret
	}
	return o.AvailableFields
}

// GetAvailableFieldsOk returns a tuple with the AvailableFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProviderContract) GetAvailableFieldsOk() ([]ContractField, bool) {
	if o == nil || IsNil(o.AvailableFields) {
		return nil, false
	}
	return o.AvailableFields, true
}

// HasAvailableFields returns a boolean if a field has been set.
func (o *ProviderContract) HasAvailableFields() bool {
	if o != nil && !IsNil(o.AvailableFields) {
		return true
	}

	return false
}

// SetAvailableFields gets a reference to the given []ContractField and assigns it to the AvailableFields field.
func (o *ProviderContract) SetAvailableFields(v []ContractField) {
	o.AvailableFields = v
}

// GetSubProviders returns the SubProviders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProviderContract) GetSubProviders() []SubProviderMetadata {
	if o == nil {
		var ret []SubProviderMetadata
		return ret
	}
	return o.SubProviders
}

// GetSubProvidersOk returns a tuple with the SubProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProviderContract) GetSubProvidersOk() ([]SubProviderMetadata, bool) {
	if o == nil || IsNil(o.SubProviders) {
		return nil, false
	}
	return o.SubProviders, true
}

// HasSubProviders returns a boolean if a field has been set.
func (o *ProviderContract) HasSubProviders() bool {
	if o != nil && !IsNil(o.SubProviders) {
		return true
	}

	return false
}

// SetSubProviders gets a reference to the given []SubProviderMetadata and assigns it to the SubProviders field.
func (o *ProviderContract) SetSubProviders(v []SubProviderMetadata) {
	o.SubProviders = v
}

// GetHealth returns the Health field value
func (o *ProviderContract) GetHealth() ProviderHealth {
	if o == nil {
		var ret ProviderHealth
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *ProviderContract) GetHealthOk() (*ProviderHealth, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Health, true
}

// SetHealth sets field value
func (o *ProviderContract) SetHealth(v ProviderHealth) {
	o.Health = v
}

func (o ProviderContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["subtext"] = o.Subtext
	toSerialize["description"] = o.Description
	toSerialize["logoUrl"] = o.LogoUrl
	toSerialize["available"] = o.Available
	toSerialize["geography"] = o.Geography
	toSerialize["regions"] = o.Regions
	toSerialize["launchMethod"] = o.LaunchMethod
	toSerialize["collectionMethod"] = o.CollectionMethod
	toSerialize["resultsMayBeDelayedAfterRedirect"] = o.ResultsMayBeDelayedAfterRedirect
	toSerialize["hasRefreshableContent"] = o.HasRefreshableContent
	toSerialize["requiresInput"] = o.RequiresInput
	toSerialize["hasTrinsicInterface"] = o.HasTrinsicInterface
	toSerialize["supportsAdvancedProviderSessions"] = o.SupportsAdvancedProviderSessions
	if o.AvailableFields != nil {
		toSerialize["availableFields"] = o.AvailableFields
	}
	if o.SubProviders != nil {
		toSerialize["subProviders"] = o.SubProviders
	}
	toSerialize["health"] = o.Health
	return toSerialize, nil
}

func (o *ProviderContract) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"subtext",
		"description",
		"logoUrl",
		"available",
		"geography",
		"regions",
		"launchMethod",
		"collectionMethod",
		"resultsMayBeDelayedAfterRedirect",
		"hasRefreshableContent",
		"requiresInput",
		"hasTrinsicInterface",
		"supportsAdvancedProviderSessions",
		"health",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderContract := _ProviderContract{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderContract)

	if err != nil {
		return err
	}

	*o = ProviderContract(varProviderContract)

	return err
}

type NullableProviderContract struct {
	value *ProviderContract
	isSet bool
}

func (v NullableProviderContract) Get() *ProviderContract {
	return v.value
}

func (v *NullableProviderContract) Set(val *ProviderContract) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderContract) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderContract(val *ProviderContract) *NullableProviderContract {
	return &NullableProviderContract{value: val, isSet: true}
}

func (v NullableProviderContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


