/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// FieldAvailability Indicates when a field will be available in verification results.
type FieldAvailability string

// List of FieldAvailability
const (
	FIELDAVAILABILITY_NEVER FieldAvailability = "Never"
	FIELDAVAILABILITY_SOMETIMES FieldAvailability = "Sometimes"
	FIELDAVAILABILITY_ALWAYS FieldAvailability = "Always"
)

// All allowed values of FieldAvailability enum
var AllowedFieldAvailabilityEnumValues = []FieldAvailability{
	"Never",
	"Sometimes",
	"Always",
}

func (v *FieldAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldAvailability(value)
	for _, existing := range AllowedFieldAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldAvailability", value)
}

// NewFieldAvailabilityFromValue returns a pointer to a valid FieldAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldAvailabilityFromValue(v string) (*FieldAvailability, error) {
	ev := FieldAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldAvailability: valid values are %v", v, AllowedFieldAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldAvailability) IsValid() bool {
	for _, existing := range AllowedFieldAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldAvailability value
func (v FieldAvailability) Ptr() *FieldAvailability {
	return &v
}

type NullableFieldAvailability struct {
	value *FieldAvailability
	isSet bool
}

func (v NullableFieldAvailability) Get() *FieldAvailability {
	return v.value
}

func (v *NullableFieldAvailability) Set(val *FieldAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldAvailability(val *FieldAvailability) *NullableFieldAvailability {
	return &NullableFieldAvailability{value: val, isSet: true}
}

func (v NullableFieldAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

