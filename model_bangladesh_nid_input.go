/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the BangladeshNidInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BangladeshNidInput{}

// BangladeshNidInput struct for BangladeshNidInput
type BangladeshNidInput struct {
	// The user's Bangladesh National ID number.
	NationalIdNumber NullableString `json:"nationalIdNumber,omitempty"`
	// The user's date of birth, in `YYYY-MM-DD` format
	DateOfBirth NullableString `json:"dateOfBirth,omitempty"`
	// The user's full name
	Name NullableString `json:"name,omitempty"`
	// The raw bytes of the photo file collected from the user.
	PhotoByes NullableString `json:"photoByes,omitempty"`
	// The MIME Type of the file contained in `PhotoByes`.              Must be one of `image/jpeg`, or `image/png`.
	PhotoImageMimeType NullableString `json:"photoImageMimeType,omitempty"`
}

// NewBangladeshNidInput instantiates a new BangladeshNidInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBangladeshNidInput() *BangladeshNidInput {
	this := BangladeshNidInput{}
	return &this
}

// NewBangladeshNidInputWithDefaults instantiates a new BangladeshNidInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBangladeshNidInputWithDefaults() *BangladeshNidInput {
	this := BangladeshNidInput{}
	return &this
}

// GetNationalIdNumber returns the NationalIdNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetNationalIdNumber() string {
	if o == nil || IsNil(o.NationalIdNumber.Get()) {
		var ret string
		return ret
	}
	return *o.NationalIdNumber.Get()
}

// GetNationalIdNumberOk returns a tuple with the NationalIdNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetNationalIdNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NationalIdNumber.Get(), o.NationalIdNumber.IsSet()
}

// HasNationalIdNumber returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasNationalIdNumber() bool {
	if o != nil && o.NationalIdNumber.IsSet() {
		return true
	}

	return false
}

// SetNationalIdNumber gets a reference to the given NullableString and assigns it to the NationalIdNumber field.
func (o *BangladeshNidInput) SetNationalIdNumber(v string) {
	o.NationalIdNumber.Set(&v)
}
// SetNationalIdNumberNil sets the value for NationalIdNumber to be an explicit nil
func (o *BangladeshNidInput) SetNationalIdNumberNil() {
	o.NationalIdNumber.Set(nil)
}

// UnsetNationalIdNumber ensures that no value is present for NationalIdNumber, not even an explicit nil
func (o *BangladeshNidInput) UnsetNationalIdNumber() {
	o.NationalIdNumber.Unset()
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth.Get()) {
		var ret string
		return ret
	}
	return *o.DateOfBirth.Get()
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateOfBirth.Get(), o.DateOfBirth.IsSet()
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth.IsSet() {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given NullableString and assigns it to the DateOfBirth field.
func (o *BangladeshNidInput) SetDateOfBirth(v string) {
	o.DateOfBirth.Set(&v)
}
// SetDateOfBirthNil sets the value for DateOfBirth to be an explicit nil
func (o *BangladeshNidInput) SetDateOfBirthNil() {
	o.DateOfBirth.Set(nil)
}

// UnsetDateOfBirth ensures that no value is present for DateOfBirth, not even an explicit nil
func (o *BangladeshNidInput) UnsetDateOfBirth() {
	o.DateOfBirth.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BangladeshNidInput) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BangladeshNidInput) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BangladeshNidInput) UnsetName() {
	o.Name.Unset()
}

// GetPhotoByes returns the PhotoByes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetPhotoByes() string {
	if o == nil || IsNil(o.PhotoByes.Get()) {
		var ret string
		return ret
	}
	return *o.PhotoByes.Get()
}

// GetPhotoByesOk returns a tuple with the PhotoByes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetPhotoByesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhotoByes.Get(), o.PhotoByes.IsSet()
}

// HasPhotoByes returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasPhotoByes() bool {
	if o != nil && o.PhotoByes.IsSet() {
		return true
	}

	return false
}

// SetPhotoByes gets a reference to the given NullableString and assigns it to the PhotoByes field.
func (o *BangladeshNidInput) SetPhotoByes(v string) {
	o.PhotoByes.Set(&v)
}
// SetPhotoByesNil sets the value for PhotoByes to be an explicit nil
func (o *BangladeshNidInput) SetPhotoByesNil() {
	o.PhotoByes.Set(nil)
}

// UnsetPhotoByes ensures that no value is present for PhotoByes, not even an explicit nil
func (o *BangladeshNidInput) UnsetPhotoByes() {
	o.PhotoByes.Unset()
}

// GetPhotoImageMimeType returns the PhotoImageMimeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetPhotoImageMimeType() string {
	if o == nil || IsNil(o.PhotoImageMimeType.Get()) {
		var ret string
		return ret
	}
	return *o.PhotoImageMimeType.Get()
}

// GetPhotoImageMimeTypeOk returns a tuple with the PhotoImageMimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetPhotoImageMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhotoImageMimeType.Get(), o.PhotoImageMimeType.IsSet()
}

// HasPhotoImageMimeType returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasPhotoImageMimeType() bool {
	if o != nil && o.PhotoImageMimeType.IsSet() {
		return true
	}

	return false
}

// SetPhotoImageMimeType gets a reference to the given NullableString and assigns it to the PhotoImageMimeType field.
func (o *BangladeshNidInput) SetPhotoImageMimeType(v string) {
	o.PhotoImageMimeType.Set(&v)
}
// SetPhotoImageMimeTypeNil sets the value for PhotoImageMimeType to be an explicit nil
func (o *BangladeshNidInput) SetPhotoImageMimeTypeNil() {
	o.PhotoImageMimeType.Set(nil)
}

// UnsetPhotoImageMimeType ensures that no value is present for PhotoImageMimeType, not even an explicit nil
func (o *BangladeshNidInput) UnsetPhotoImageMimeType() {
	o.PhotoImageMimeType.Unset()
}

func (o BangladeshNidInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BangladeshNidInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NationalIdNumber.IsSet() {
		toSerialize["nationalIdNumber"] = o.NationalIdNumber.Get()
	}
	if o.DateOfBirth.IsSet() {
		toSerialize["dateOfBirth"] = o.DateOfBirth.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.PhotoByes.IsSet() {
		toSerialize["photoByes"] = o.PhotoByes.Get()
	}
	if o.PhotoImageMimeType.IsSet() {
		toSerialize["photoImageMimeType"] = o.PhotoImageMimeType.Get()
	}
	return toSerialize, nil
}

type NullableBangladeshNidInput struct {
	value *BangladeshNidInput
	isSet bool
}

func (v NullableBangladeshNidInput) Get() *BangladeshNidInput {
	return v.value
}

func (v *NullableBangladeshNidInput) Set(val *BangladeshNidInput) {
	v.value = val
	v.isSet = true
}

func (v NullableBangladeshNidInput) IsSet() bool {
	return v.isSet
}

func (v *NullableBangladeshNidInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBangladeshNidInput(val *BangladeshNidInput) *NullableBangladeshNidInput {
	return &NullableBangladeshNidInput{value: val, isSet: true}
}

func (v NullableBangladeshNidInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBangladeshNidInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


