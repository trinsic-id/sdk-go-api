/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BangladeshNidInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BangladeshNidInput{}

// BangladeshNidInput struct for BangladeshNidInput
type BangladeshNidInput struct {
	// The user's Bangladesh National ID number.
	NationalIdNumber string `json:"nationalIdNumber"`
	// The user's date of birth, in `YYYY-MM-DD` format
	DateOfBirth string `json:"dateOfBirth"`
	// The user's full name
	Name string `json:"name"`
	// The raw bytes of the photo file collected from the user.
	PhotoByes NullableString `json:"photoByes,omitempty"`
	// The MIME Type of the file contained in `PhotoByes`.              Must be one of `image/jpeg`, or `image/png`.
	PhotoImageMimeType NullableString `json:"photoImageMimeType,omitempty"`
}

type _BangladeshNidInput BangladeshNidInput

// NewBangladeshNidInput instantiates a new BangladeshNidInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBangladeshNidInput(nationalIdNumber string, dateOfBirth string, name string) *BangladeshNidInput {
	this := BangladeshNidInput{}
	this.NationalIdNumber = nationalIdNumber
	this.DateOfBirth = dateOfBirth
	this.Name = name
	return &this
}

// NewBangladeshNidInputWithDefaults instantiates a new BangladeshNidInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBangladeshNidInputWithDefaults() *BangladeshNidInput {
	this := BangladeshNidInput{}
	return &this
}

// GetNationalIdNumber returns the NationalIdNumber field value
func (o *BangladeshNidInput) GetNationalIdNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NationalIdNumber
}

// GetNationalIdNumberOk returns a tuple with the NationalIdNumber field value
// and a boolean to check if the value has been set.
func (o *BangladeshNidInput) GetNationalIdNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NationalIdNumber, true
}

// SetNationalIdNumber sets field value
func (o *BangladeshNidInput) SetNationalIdNumber(v string) {
	o.NationalIdNumber = v
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *BangladeshNidInput) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *BangladeshNidInput) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *BangladeshNidInput) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetName returns the Name field value
func (o *BangladeshNidInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BangladeshNidInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BangladeshNidInput) SetName(v string) {
	o.Name = v
}

// GetPhotoByes returns the PhotoByes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetPhotoByes() string {
	if o == nil || IsNil(o.PhotoByes.Get()) {
		var ret string
		return ret
	}
	return *o.PhotoByes.Get()
}

// GetPhotoByesOk returns a tuple with the PhotoByes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetPhotoByesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhotoByes.Get(), o.PhotoByes.IsSet()
}

// HasPhotoByes returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasPhotoByes() bool {
	if o != nil && o.PhotoByes.IsSet() {
		return true
	}

	return false
}

// SetPhotoByes gets a reference to the given NullableString and assigns it to the PhotoByes field.
func (o *BangladeshNidInput) SetPhotoByes(v string) {
	o.PhotoByes.Set(&v)
}
// SetPhotoByesNil sets the value for PhotoByes to be an explicit nil
func (o *BangladeshNidInput) SetPhotoByesNil() {
	o.PhotoByes.Set(nil)
}

// UnsetPhotoByes ensures that no value is present for PhotoByes, not even an explicit nil
func (o *BangladeshNidInput) UnsetPhotoByes() {
	o.PhotoByes.Unset()
}

// GetPhotoImageMimeType returns the PhotoImageMimeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BangladeshNidInput) GetPhotoImageMimeType() string {
	if o == nil || IsNil(o.PhotoImageMimeType.Get()) {
		var ret string
		return ret
	}
	return *o.PhotoImageMimeType.Get()
}

// GetPhotoImageMimeTypeOk returns a tuple with the PhotoImageMimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BangladeshNidInput) GetPhotoImageMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhotoImageMimeType.Get(), o.PhotoImageMimeType.IsSet()
}

// HasPhotoImageMimeType returns a boolean if a field has been set.
func (o *BangladeshNidInput) HasPhotoImageMimeType() bool {
	if o != nil && o.PhotoImageMimeType.IsSet() {
		return true
	}

	return false
}

// SetPhotoImageMimeType gets a reference to the given NullableString and assigns it to the PhotoImageMimeType field.
func (o *BangladeshNidInput) SetPhotoImageMimeType(v string) {
	o.PhotoImageMimeType.Set(&v)
}
// SetPhotoImageMimeTypeNil sets the value for PhotoImageMimeType to be an explicit nil
func (o *BangladeshNidInput) SetPhotoImageMimeTypeNil() {
	o.PhotoImageMimeType.Set(nil)
}

// UnsetPhotoImageMimeType ensures that no value is present for PhotoImageMimeType, not even an explicit nil
func (o *BangladeshNidInput) UnsetPhotoImageMimeType() {
	o.PhotoImageMimeType.Unset()
}

func (o BangladeshNidInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BangladeshNidInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nationalIdNumber"] = o.NationalIdNumber
	toSerialize["dateOfBirth"] = o.DateOfBirth
	toSerialize["name"] = o.Name
	if o.PhotoByes.IsSet() {
		toSerialize["photoByes"] = o.PhotoByes.Get()
	}
	if o.PhotoImageMimeType.IsSet() {
		toSerialize["photoImageMimeType"] = o.PhotoImageMimeType.Get()
	}
	return toSerialize, nil
}

func (o *BangladeshNidInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nationalIdNumber",
		"dateOfBirth",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBangladeshNidInput := _BangladeshNidInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBangladeshNidInput)

	if err != nil {
		return err
	}

	*o = BangladeshNidInput(varBangladeshNidInput)

	return err
}

type NullableBangladeshNidInput struct {
	value *BangladeshNidInput
	isSet bool
}

func (v NullableBangladeshNidInput) Get() *BangladeshNidInput {
	return v.value
}

func (v *NullableBangladeshNidInput) Set(val *BangladeshNidInput) {
	v.value = val
	v.isSet = true
}

func (v NullableBangladeshNidInput) IsSet() bool {
	return v.isSet
}

func (v *NullableBangladeshNidInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBangladeshNidInput(val *BangladeshNidInput) *NullableBangladeshNidInput {
	return &NullableBangladeshNidInput{value: val, isSet: true}
}

func (v NullableBangladeshNidInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBangladeshNidInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


