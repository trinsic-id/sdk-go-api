/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IntegrationStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationStep{}

// IntegrationStep A step to perform in the process of executing an Advanced Provider Session
type IntegrationStep struct {
	// The launch method to perform
	Method IntegrationLaunchMethod `json:"method"`
	// Step type-specific content related to the step: a URL for `LaunchBrowser`, a deeplink for `DeeplinkToMobile` or a string to show to the user for `ShowContent`.
	Content string `json:"content"`
	// If non-null, contains metadata about how to refresh the value of `content`.
	Refresh NullableStepRefreshInfo `json:"refresh"`
}

type _IntegrationStep IntegrationStep

// NewIntegrationStep instantiates a new IntegrationStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationStep(method IntegrationLaunchMethod, content string, refresh NullableStepRefreshInfo) *IntegrationStep {
	this := IntegrationStep{}
	this.Method = method
	this.Content = content
	this.Refresh = refresh
	return &this
}

// NewIntegrationStepWithDefaults instantiates a new IntegrationStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationStepWithDefaults() *IntegrationStep {
	this := IntegrationStep{}
	return &this
}

// GetMethod returns the Method field value
func (o *IntegrationStep) GetMethod() IntegrationLaunchMethod {
	if o == nil {
		var ret IntegrationLaunchMethod
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *IntegrationStep) GetMethodOk() (*IntegrationLaunchMethod, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *IntegrationStep) SetMethod(v IntegrationLaunchMethod) {
	o.Method = v
}

// GetContent returns the Content field value
func (o *IntegrationStep) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *IntegrationStep) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *IntegrationStep) SetContent(v string) {
	o.Content = v
}

// GetRefresh returns the Refresh field value
// If the value is explicit nil, the zero value for StepRefreshInfo will be returned
func (o *IntegrationStep) GetRefresh() StepRefreshInfo {
	if o == nil || o.Refresh.Get() == nil {
		var ret StepRefreshInfo
		return ret
	}

	return *o.Refresh.Get()
}

// GetRefreshOk returns a tuple with the Refresh field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IntegrationStep) GetRefreshOk() (*StepRefreshInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Refresh.Get(), o.Refresh.IsSet()
}

// SetRefresh sets field value
func (o *IntegrationStep) SetRefresh(v StepRefreshInfo) {
	o.Refresh.Set(&v)
}

func (o IntegrationStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	toSerialize["content"] = o.Content
	toSerialize["refresh"] = o.Refresh.Get()
	return toSerialize, nil
}

func (o *IntegrationStep) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
		"content",
		"refresh",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationStep := _IntegrationStep{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIntegrationStep)

	if err != nil {
		return err
	}

	*o = IntegrationStep(varIntegrationStep)

	return err
}

type NullableIntegrationStep struct {
	value *IntegrationStep
	isSet bool
}

func (v NullableIntegrationStep) Get() *IntegrationStep {
	return v.value
}

func (v *NullableIntegrationStep) Set(val *IntegrationStep) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationStep) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationStep(val *IntegrationStep) *NullableIntegrationStep {
	return &NullableIntegrationStep{value: val, isSet: true}
}

func (v NullableIntegrationStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


