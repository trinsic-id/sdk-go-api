/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KenyaNidInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KenyaNidInput{}

// KenyaNidInput struct for KenyaNidInput
type KenyaNidInput struct {
	// The user's first name as it appears in their National ID
	FirstName string `json:"firstName"`
	// The user's middle name as it appears in their National ID (optional)
	MiddleName NullableString `json:"middleName,omitempty"`
	// The user's middle name as it appears in their National ID (optional)
	LastName string `json:"lastName"`
	// The user's date of birth, in `YYYY-MM-DD` format
	DateOfBirth string `json:"dateOfBirth"`
	// The user's gender as it appears in their National ID (e.g., male, female)
	Gender string `json:"gender"`
	// The user's South Kenya National ID number
	NationalIdNumber string `json:"nationalIdNumber" validate:"regexp=^\\\\d*$"`
}

type _KenyaNidInput KenyaNidInput

// NewKenyaNidInput instantiates a new KenyaNidInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKenyaNidInput(firstName string, lastName string, dateOfBirth string, gender string, nationalIdNumber string) *KenyaNidInput {
	this := KenyaNidInput{}
	this.FirstName = firstName
	this.LastName = lastName
	this.DateOfBirth = dateOfBirth
	this.Gender = gender
	this.NationalIdNumber = nationalIdNumber
	return &this
}

// NewKenyaNidInputWithDefaults instantiates a new KenyaNidInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKenyaNidInputWithDefaults() *KenyaNidInput {
	this := KenyaNidInput{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *KenyaNidInput) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *KenyaNidInput) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *KenyaNidInput) SetFirstName(v string) {
	o.FirstName = v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KenyaNidInput) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName.Get()) {
		var ret string
		return ret
	}
	return *o.MiddleName.Get()
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KenyaNidInput) GetMiddleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MiddleName.Get(), o.MiddleName.IsSet()
}

// HasMiddleName returns a boolean if a field has been set.
func (o *KenyaNidInput) HasMiddleName() bool {
	if o != nil && o.MiddleName.IsSet() {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given NullableString and assigns it to the MiddleName field.
func (o *KenyaNidInput) SetMiddleName(v string) {
	o.MiddleName.Set(&v)
}
// SetMiddleNameNil sets the value for MiddleName to be an explicit nil
func (o *KenyaNidInput) SetMiddleNameNil() {
	o.MiddleName.Set(nil)
}

// UnsetMiddleName ensures that no value is present for MiddleName, not even an explicit nil
func (o *KenyaNidInput) UnsetMiddleName() {
	o.MiddleName.Unset()
}

// GetLastName returns the LastName field value
func (o *KenyaNidInput) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *KenyaNidInput) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *KenyaNidInput) SetLastName(v string) {
	o.LastName = v
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *KenyaNidInput) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *KenyaNidInput) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *KenyaNidInput) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetGender returns the Gender field value
func (o *KenyaNidInput) GetGender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gender
}

// GetGenderOk returns a tuple with the Gender field value
// and a boolean to check if the value has been set.
func (o *KenyaNidInput) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gender, true
}

// SetGender sets field value
func (o *KenyaNidInput) SetGender(v string) {
	o.Gender = v
}

// GetNationalIdNumber returns the NationalIdNumber field value
func (o *KenyaNidInput) GetNationalIdNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NationalIdNumber
}

// GetNationalIdNumberOk returns a tuple with the NationalIdNumber field value
// and a boolean to check if the value has been set.
func (o *KenyaNidInput) GetNationalIdNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NationalIdNumber, true
}

// SetNationalIdNumber sets field value
func (o *KenyaNidInput) SetNationalIdNumber(v string) {
	o.NationalIdNumber = v
}

func (o KenyaNidInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KenyaNidInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	if o.MiddleName.IsSet() {
		toSerialize["middleName"] = o.MiddleName.Get()
	}
	toSerialize["lastName"] = o.LastName
	toSerialize["dateOfBirth"] = o.DateOfBirth
	toSerialize["gender"] = o.Gender
	toSerialize["nationalIdNumber"] = o.NationalIdNumber
	return toSerialize, nil
}

func (o *KenyaNidInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"dateOfBirth",
		"gender",
		"nationalIdNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKenyaNidInput := _KenyaNidInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKenyaNidInput)

	if err != nil {
		return err
	}

	*o = KenyaNidInput(varKenyaNidInput)

	return err
}

type NullableKenyaNidInput struct {
	value *KenyaNidInput
	isSet bool
}

func (v NullableKenyaNidInput) Get() *KenyaNidInput {
	return v.value
}

func (v *NullableKenyaNidInput) Set(val *KenyaNidInput) {
	v.value = val
	v.isSet = true
}

func (v NullableKenyaNidInput) IsSet() bool {
	return v.isSet
}

func (v *NullableKenyaNidInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKenyaNidInput(val *KenyaNidInput) *NullableKenyaNidInput {
	return &NullableKenyaNidInput{value: val, isSet: true}
}

func (v NullableKenyaNidInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKenyaNidInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


