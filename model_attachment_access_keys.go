/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AttachmentAccessKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentAccessKeys{}

// AttachmentAccessKeys struct for AttachmentAccessKeys
type AttachmentAccessKeys struct {
	Selfie NullableString `json:"selfie,omitempty"`
	DocumentFront NullableString `json:"documentFront,omitempty"`
	DocumentBack NullableString `json:"documentBack,omitempty"`
	DocumentPortrait NullableString `json:"documentPortrait,omitempty"`
	Provider ProviderAttachments `json:"provider"`
}

type _AttachmentAccessKeys AttachmentAccessKeys

// NewAttachmentAccessKeys instantiates a new AttachmentAccessKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentAccessKeys(provider ProviderAttachments) *AttachmentAccessKeys {
	this := AttachmentAccessKeys{}
	this.Provider = provider
	return &this
}

// NewAttachmentAccessKeysWithDefaults instantiates a new AttachmentAccessKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentAccessKeysWithDefaults() *AttachmentAccessKeys {
	this := AttachmentAccessKeys{}
	return &this
}

// GetSelfie returns the Selfie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttachmentAccessKeys) GetSelfie() string {
	if o == nil || IsNil(o.Selfie.Get()) {
		var ret string
		return ret
	}
	return *o.Selfie.Get()
}

// GetSelfieOk returns a tuple with the Selfie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttachmentAccessKeys) GetSelfieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Selfie.Get(), o.Selfie.IsSet()
}

// HasSelfie returns a boolean if a field has been set.
func (o *AttachmentAccessKeys) HasSelfie() bool {
	if o != nil && o.Selfie.IsSet() {
		return true
	}

	return false
}

// SetSelfie gets a reference to the given NullableString and assigns it to the Selfie field.
func (o *AttachmentAccessKeys) SetSelfie(v string) {
	o.Selfie.Set(&v)
}
// SetSelfieNil sets the value for Selfie to be an explicit nil
func (o *AttachmentAccessKeys) SetSelfieNil() {
	o.Selfie.Set(nil)
}

// UnsetSelfie ensures that no value is present for Selfie, not even an explicit nil
func (o *AttachmentAccessKeys) UnsetSelfie() {
	o.Selfie.Unset()
}

// GetDocumentFront returns the DocumentFront field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttachmentAccessKeys) GetDocumentFront() string {
	if o == nil || IsNil(o.DocumentFront.Get()) {
		var ret string
		return ret
	}
	return *o.DocumentFront.Get()
}

// GetDocumentFrontOk returns a tuple with the DocumentFront field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttachmentAccessKeys) GetDocumentFrontOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentFront.Get(), o.DocumentFront.IsSet()
}

// HasDocumentFront returns a boolean if a field has been set.
func (o *AttachmentAccessKeys) HasDocumentFront() bool {
	if o != nil && o.DocumentFront.IsSet() {
		return true
	}

	return false
}

// SetDocumentFront gets a reference to the given NullableString and assigns it to the DocumentFront field.
func (o *AttachmentAccessKeys) SetDocumentFront(v string) {
	o.DocumentFront.Set(&v)
}
// SetDocumentFrontNil sets the value for DocumentFront to be an explicit nil
func (o *AttachmentAccessKeys) SetDocumentFrontNil() {
	o.DocumentFront.Set(nil)
}

// UnsetDocumentFront ensures that no value is present for DocumentFront, not even an explicit nil
func (o *AttachmentAccessKeys) UnsetDocumentFront() {
	o.DocumentFront.Unset()
}

// GetDocumentBack returns the DocumentBack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttachmentAccessKeys) GetDocumentBack() string {
	if o == nil || IsNil(o.DocumentBack.Get()) {
		var ret string
		return ret
	}
	return *o.DocumentBack.Get()
}

// GetDocumentBackOk returns a tuple with the DocumentBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttachmentAccessKeys) GetDocumentBackOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentBack.Get(), o.DocumentBack.IsSet()
}

// HasDocumentBack returns a boolean if a field has been set.
func (o *AttachmentAccessKeys) HasDocumentBack() bool {
	if o != nil && o.DocumentBack.IsSet() {
		return true
	}

	return false
}

// SetDocumentBack gets a reference to the given NullableString and assigns it to the DocumentBack field.
func (o *AttachmentAccessKeys) SetDocumentBack(v string) {
	o.DocumentBack.Set(&v)
}
// SetDocumentBackNil sets the value for DocumentBack to be an explicit nil
func (o *AttachmentAccessKeys) SetDocumentBackNil() {
	o.DocumentBack.Set(nil)
}

// UnsetDocumentBack ensures that no value is present for DocumentBack, not even an explicit nil
func (o *AttachmentAccessKeys) UnsetDocumentBack() {
	o.DocumentBack.Unset()
}

// GetDocumentPortrait returns the DocumentPortrait field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttachmentAccessKeys) GetDocumentPortrait() string {
	if o == nil || IsNil(o.DocumentPortrait.Get()) {
		var ret string
		return ret
	}
	return *o.DocumentPortrait.Get()
}

// GetDocumentPortraitOk returns a tuple with the DocumentPortrait field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttachmentAccessKeys) GetDocumentPortraitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentPortrait.Get(), o.DocumentPortrait.IsSet()
}

// HasDocumentPortrait returns a boolean if a field has been set.
func (o *AttachmentAccessKeys) HasDocumentPortrait() bool {
	if o != nil && o.DocumentPortrait.IsSet() {
		return true
	}

	return false
}

// SetDocumentPortrait gets a reference to the given NullableString and assigns it to the DocumentPortrait field.
func (o *AttachmentAccessKeys) SetDocumentPortrait(v string) {
	o.DocumentPortrait.Set(&v)
}
// SetDocumentPortraitNil sets the value for DocumentPortrait to be an explicit nil
func (o *AttachmentAccessKeys) SetDocumentPortraitNil() {
	o.DocumentPortrait.Set(nil)
}

// UnsetDocumentPortrait ensures that no value is present for DocumentPortrait, not even an explicit nil
func (o *AttachmentAccessKeys) UnsetDocumentPortrait() {
	o.DocumentPortrait.Unset()
}

// GetProvider returns the Provider field value
func (o *AttachmentAccessKeys) GetProvider() ProviderAttachments {
	if o == nil {
		var ret ProviderAttachments
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *AttachmentAccessKeys) GetProviderOk() (*ProviderAttachments, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *AttachmentAccessKeys) SetProvider(v ProviderAttachments) {
	o.Provider = v
}

func (o AttachmentAccessKeys) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentAccessKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Selfie.IsSet() {
		toSerialize["selfie"] = o.Selfie.Get()
	}
	if o.DocumentFront.IsSet() {
		toSerialize["documentFront"] = o.DocumentFront.Get()
	}
	if o.DocumentBack.IsSet() {
		toSerialize["documentBack"] = o.DocumentBack.Get()
	}
	if o.DocumentPortrait.IsSet() {
		toSerialize["documentPortrait"] = o.DocumentPortrait.Get()
	}
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *AttachmentAccessKeys) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachmentAccessKeys := _AttachmentAccessKeys{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAttachmentAccessKeys)

	if err != nil {
		return err
	}

	*o = AttachmentAccessKeys(varAttachmentAccessKeys)

	return err
}

type NullableAttachmentAccessKeys struct {
	value *AttachmentAccessKeys
	isSet bool
}

func (v NullableAttachmentAccessKeys) Get() *AttachmentAccessKeys {
	return v.value
}

func (v *NullableAttachmentAccessKeys) Set(val *AttachmentAccessKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentAccessKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentAccessKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentAccessKeys(val *AttachmentAccessKeys) *NullableAttachmentAccessKeys {
	return &NullableAttachmentAccessKeys{value: val, isSet: true}
}

func (v NullableAttachmentAccessKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentAccessKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


