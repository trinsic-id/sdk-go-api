/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateAdvancedProviderSessionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAdvancedProviderSessionRequest{}

// CreateAdvancedProviderSessionRequest struct for CreateAdvancedProviderSessionRequest
type CreateAdvancedProviderSessionRequest struct {
	// The ID of the provider to launch
	Provider string `json:"provider"`
	// Provider-specific input for those providers which require it.
	ProviderInput NullableProviderInput `json:"providerInput,omitempty"`
	// The Redirect URL to which the user should be sent after the session is complete.              This field is required for providers which employ a redirect-based flow.
	RedirectUrl NullableString `json:"redirectUrl,omitempty"`
	// The list of capabilities your integration supports. Capabilities are the core of Trinsic's whitelabel-with-optional-fallback offering.              Most capabilities align with either an `IntegrationLaunchMethod` or an `IntegrationCollectionMethod`. The exception being refresh content to support updating the content of the launch method.              For example, to support a basic redirect-based flow, you must include the `LaunchRedirect` and `CaptureRedirect` capabilities. To support a mobile deeplink / polling flow, you must include the `DeeplinkToMobile` and `PollForResults` capabilities.              If `FallbackToHostedUi` is `true`, Trinsic will automatically fall back to a Trinsic-hosted UI to cover any gaps in your integration's capabilities. If `FallbackToHostedUi` is `false`, gaps in your integration's capabilities will result in an error during Session creation.              Read more on how to integrate at <a href=\"https://docs.trinsic.id/docs/advanced-provider-sessions\">the guide on Advanced Provider Sessions</a>
	Capabilities []IntegrationCapability `json:"capabilities"`
	// Whether the session should fall back to a Trinsic-hosted UI in certain instances.              Specifically, fallback will occur if any of the following are true: - You attempted to launch a provider which requires a capability you did not express support for     - In this case, Trinsic's hosted UI will perform the necessary capability - You attempted to launch a provider which requires input, and the input was either not provided or incomplete     - In this case, Trinsic's hosted UI will collect the necessary input from the user              If fallback occurs, the session's NextStep will always be LaunchBrowser, and the CollectionMethod will always be CaptureRedirect.              If this field is set to `true`, you must also: 1. Set the `RedirectUrl` field to a non-empty value 2. Include the `LaunchBrowser` and `CaptureRedirect` capabilities in the `Capabilities` field
	FallbackToHostedUI NullableBool `json:"fallbackToHostedUI,omitempty"`
}

type _CreateAdvancedProviderSessionRequest CreateAdvancedProviderSessionRequest

// NewCreateAdvancedProviderSessionRequest instantiates a new CreateAdvancedProviderSessionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAdvancedProviderSessionRequest(provider string, capabilities []IntegrationCapability) *CreateAdvancedProviderSessionRequest {
	this := CreateAdvancedProviderSessionRequest{}
	this.Provider = provider
	this.Capabilities = capabilities
	return &this
}

// NewCreateAdvancedProviderSessionRequestWithDefaults instantiates a new CreateAdvancedProviderSessionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAdvancedProviderSessionRequestWithDefaults() *CreateAdvancedProviderSessionRequest {
	this := CreateAdvancedProviderSessionRequest{}
	return &this
}

// GetProvider returns the Provider field value
func (o *CreateAdvancedProviderSessionRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *CreateAdvancedProviderSessionRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *CreateAdvancedProviderSessionRequest) SetProvider(v string) {
	o.Provider = v
}

// GetProviderInput returns the ProviderInput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAdvancedProviderSessionRequest) GetProviderInput() ProviderInput {
	if o == nil || IsNil(o.ProviderInput.Get()) {
		var ret ProviderInput
		return ret
	}
	return *o.ProviderInput.Get()
}

// GetProviderInputOk returns a tuple with the ProviderInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAdvancedProviderSessionRequest) GetProviderInputOk() (*ProviderInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderInput.Get(), o.ProviderInput.IsSet()
}

// HasProviderInput returns a boolean if a field has been set.
func (o *CreateAdvancedProviderSessionRequest) HasProviderInput() bool {
	if o != nil && o.ProviderInput.IsSet() {
		return true
	}

	return false
}

// SetProviderInput gets a reference to the given NullableProviderInput and assigns it to the ProviderInput field.
func (o *CreateAdvancedProviderSessionRequest) SetProviderInput(v ProviderInput) {
	o.ProviderInput.Set(&v)
}
// SetProviderInputNil sets the value for ProviderInput to be an explicit nil
func (o *CreateAdvancedProviderSessionRequest) SetProviderInputNil() {
	o.ProviderInput.Set(nil)
}

// UnsetProviderInput ensures that no value is present for ProviderInput, not even an explicit nil
func (o *CreateAdvancedProviderSessionRequest) UnsetProviderInput() {
	o.ProviderInput.Unset()
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAdvancedProviderSessionRequest) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl.Get()) {
		var ret string
		return ret
	}
	return *o.RedirectUrl.Get()
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAdvancedProviderSessionRequest) GetRedirectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUrl.Get(), o.RedirectUrl.IsSet()
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *CreateAdvancedProviderSessionRequest) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given NullableString and assigns it to the RedirectUrl field.
func (o *CreateAdvancedProviderSessionRequest) SetRedirectUrl(v string) {
	o.RedirectUrl.Set(&v)
}
// SetRedirectUrlNil sets the value for RedirectUrl to be an explicit nil
func (o *CreateAdvancedProviderSessionRequest) SetRedirectUrlNil() {
	o.RedirectUrl.Set(nil)
}

// UnsetRedirectUrl ensures that no value is present for RedirectUrl, not even an explicit nil
func (o *CreateAdvancedProviderSessionRequest) UnsetRedirectUrl() {
	o.RedirectUrl.Unset()
}

// GetCapabilities returns the Capabilities field value
func (o *CreateAdvancedProviderSessionRequest) GetCapabilities() []IntegrationCapability {
	if o == nil {
		var ret []IntegrationCapability
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *CreateAdvancedProviderSessionRequest) GetCapabilitiesOk() ([]IntegrationCapability, bool) {
	if o == nil {
		return nil, false
	}
	return o.Capabilities, true
}

// SetCapabilities sets field value
func (o *CreateAdvancedProviderSessionRequest) SetCapabilities(v []IntegrationCapability) {
	o.Capabilities = v
}

// GetFallbackToHostedUI returns the FallbackToHostedUI field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAdvancedProviderSessionRequest) GetFallbackToHostedUI() bool {
	if o == nil || IsNil(o.FallbackToHostedUI.Get()) {
		var ret bool
		return ret
	}
	return *o.FallbackToHostedUI.Get()
}

// GetFallbackToHostedUIOk returns a tuple with the FallbackToHostedUI field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAdvancedProviderSessionRequest) GetFallbackToHostedUIOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackToHostedUI.Get(), o.FallbackToHostedUI.IsSet()
}

// HasFallbackToHostedUI returns a boolean if a field has been set.
func (o *CreateAdvancedProviderSessionRequest) HasFallbackToHostedUI() bool {
	if o != nil && o.FallbackToHostedUI.IsSet() {
		return true
	}

	return false
}

// SetFallbackToHostedUI gets a reference to the given NullableBool and assigns it to the FallbackToHostedUI field.
func (o *CreateAdvancedProviderSessionRequest) SetFallbackToHostedUI(v bool) {
	o.FallbackToHostedUI.Set(&v)
}
// SetFallbackToHostedUINil sets the value for FallbackToHostedUI to be an explicit nil
func (o *CreateAdvancedProviderSessionRequest) SetFallbackToHostedUINil() {
	o.FallbackToHostedUI.Set(nil)
}

// UnsetFallbackToHostedUI ensures that no value is present for FallbackToHostedUI, not even an explicit nil
func (o *CreateAdvancedProviderSessionRequest) UnsetFallbackToHostedUI() {
	o.FallbackToHostedUI.Unset()
}

func (o CreateAdvancedProviderSessionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAdvancedProviderSessionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	if o.ProviderInput.IsSet() {
		toSerialize["providerInput"] = o.ProviderInput.Get()
	}
	if o.RedirectUrl.IsSet() {
		toSerialize["redirectUrl"] = o.RedirectUrl.Get()
	}
	toSerialize["capabilities"] = o.Capabilities
	if o.FallbackToHostedUI.IsSet() {
		toSerialize["fallbackToHostedUI"] = o.FallbackToHostedUI.Get()
	}
	return toSerialize, nil
}

func (o *CreateAdvancedProviderSessionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"capabilities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateAdvancedProviderSessionRequest := _CreateAdvancedProviderSessionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateAdvancedProviderSessionRequest)

	if err != nil {
		return err
	}

	*o = CreateAdvancedProviderSessionRequest(varCreateAdvancedProviderSessionRequest)

	return err
}

type NullableCreateAdvancedProviderSessionRequest struct {
	value *CreateAdvancedProviderSessionRequest
	isSet bool
}

func (v NullableCreateAdvancedProviderSessionRequest) Get() *CreateAdvancedProviderSessionRequest {
	return v.value
}

func (v *NullableCreateAdvancedProviderSessionRequest) Set(val *CreateAdvancedProviderSessionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAdvancedProviderSessionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAdvancedProviderSessionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAdvancedProviderSessionRequest(val *CreateAdvancedProviderSessionRequest) *NullableCreateAdvancedProviderSessionRequest {
	return &NullableCreateAdvancedProviderSessionRequest{value: val, isSet: true}
}

func (v NullableCreateAdvancedProviderSessionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAdvancedProviderSessionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


