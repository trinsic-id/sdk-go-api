/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BrazilDigitalCnhInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BrazilDigitalCnhInput{}

// BrazilDigitalCnhInput struct for BrazilDigitalCnhInput
type BrazilDigitalCnhInput struct {
	// The user's 11-digit, numeric CPF Number
	CpfNumber string `json:"cpfNumber" validate:"regexp=^\\\\d*$"`
	// The raw bytes of the digital CNH file collected from the user.                TODO: Lucas or JP help me describe these below vvvvvvvv  This can be:  - An image containing a physical or digital QR code  - A PDF file exported from the CNH app  - Some scary third thing?
	DigitalCnhFile NullableString `json:"digitalCnhFile,omitempty"`
	// The MIME Type of the file contained in `DigitalCnhFile`.                Must be one of `application/pdf`, `image/jpeg`, or `image/png`.
	DigitalCnhFileContentType NullableString `json:"digitalCnhFileContentType,omitempty"`
	// The raw bytes of the image of the user's face, collected for biometric comparison.
	FacialBiometryPhoto NullableString `json:"facialBiometryPhoto,omitempty"`
}

type _BrazilDigitalCnhInput BrazilDigitalCnhInput

// NewBrazilDigitalCnhInput instantiates a new BrazilDigitalCnhInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrazilDigitalCnhInput(cpfNumber string) *BrazilDigitalCnhInput {
	this := BrazilDigitalCnhInput{}
	this.CpfNumber = cpfNumber
	return &this
}

// NewBrazilDigitalCnhInputWithDefaults instantiates a new BrazilDigitalCnhInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrazilDigitalCnhInputWithDefaults() *BrazilDigitalCnhInput {
	this := BrazilDigitalCnhInput{}
	return &this
}

// GetCpfNumber returns the CpfNumber field value
func (o *BrazilDigitalCnhInput) GetCpfNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CpfNumber
}

// GetCpfNumberOk returns a tuple with the CpfNumber field value
// and a boolean to check if the value has been set.
func (o *BrazilDigitalCnhInput) GetCpfNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpfNumber, true
}

// SetCpfNumber sets field value
func (o *BrazilDigitalCnhInput) SetCpfNumber(v string) {
	o.CpfNumber = v
}

// GetDigitalCnhFile returns the DigitalCnhFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrazilDigitalCnhInput) GetDigitalCnhFile() string {
	if o == nil || IsNil(o.DigitalCnhFile.Get()) {
		var ret string
		return ret
	}
	return *o.DigitalCnhFile.Get()
}

// GetDigitalCnhFileOk returns a tuple with the DigitalCnhFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrazilDigitalCnhInput) GetDigitalCnhFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DigitalCnhFile.Get(), o.DigitalCnhFile.IsSet()
}

// HasDigitalCnhFile returns a boolean if a field has been set.
func (o *BrazilDigitalCnhInput) HasDigitalCnhFile() bool {
	if o != nil && o.DigitalCnhFile.IsSet() {
		return true
	}

	return false
}

// SetDigitalCnhFile gets a reference to the given NullableString and assigns it to the DigitalCnhFile field.
func (o *BrazilDigitalCnhInput) SetDigitalCnhFile(v string) {
	o.DigitalCnhFile.Set(&v)
}
// SetDigitalCnhFileNil sets the value for DigitalCnhFile to be an explicit nil
func (o *BrazilDigitalCnhInput) SetDigitalCnhFileNil() {
	o.DigitalCnhFile.Set(nil)
}

// UnsetDigitalCnhFile ensures that no value is present for DigitalCnhFile, not even an explicit nil
func (o *BrazilDigitalCnhInput) UnsetDigitalCnhFile() {
	o.DigitalCnhFile.Unset()
}

// GetDigitalCnhFileContentType returns the DigitalCnhFileContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrazilDigitalCnhInput) GetDigitalCnhFileContentType() string {
	if o == nil || IsNil(o.DigitalCnhFileContentType.Get()) {
		var ret string
		return ret
	}
	return *o.DigitalCnhFileContentType.Get()
}

// GetDigitalCnhFileContentTypeOk returns a tuple with the DigitalCnhFileContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrazilDigitalCnhInput) GetDigitalCnhFileContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DigitalCnhFileContentType.Get(), o.DigitalCnhFileContentType.IsSet()
}

// HasDigitalCnhFileContentType returns a boolean if a field has been set.
func (o *BrazilDigitalCnhInput) HasDigitalCnhFileContentType() bool {
	if o != nil && o.DigitalCnhFileContentType.IsSet() {
		return true
	}

	return false
}

// SetDigitalCnhFileContentType gets a reference to the given NullableString and assigns it to the DigitalCnhFileContentType field.
func (o *BrazilDigitalCnhInput) SetDigitalCnhFileContentType(v string) {
	o.DigitalCnhFileContentType.Set(&v)
}
// SetDigitalCnhFileContentTypeNil sets the value for DigitalCnhFileContentType to be an explicit nil
func (o *BrazilDigitalCnhInput) SetDigitalCnhFileContentTypeNil() {
	o.DigitalCnhFileContentType.Set(nil)
}

// UnsetDigitalCnhFileContentType ensures that no value is present for DigitalCnhFileContentType, not even an explicit nil
func (o *BrazilDigitalCnhInput) UnsetDigitalCnhFileContentType() {
	o.DigitalCnhFileContentType.Unset()
}

// GetFacialBiometryPhoto returns the FacialBiometryPhoto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrazilDigitalCnhInput) GetFacialBiometryPhoto() string {
	if o == nil || IsNil(o.FacialBiometryPhoto.Get()) {
		var ret string
		return ret
	}
	return *o.FacialBiometryPhoto.Get()
}

// GetFacialBiometryPhotoOk returns a tuple with the FacialBiometryPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrazilDigitalCnhInput) GetFacialBiometryPhotoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FacialBiometryPhoto.Get(), o.FacialBiometryPhoto.IsSet()
}

// HasFacialBiometryPhoto returns a boolean if a field has been set.
func (o *BrazilDigitalCnhInput) HasFacialBiometryPhoto() bool {
	if o != nil && o.FacialBiometryPhoto.IsSet() {
		return true
	}

	return false
}

// SetFacialBiometryPhoto gets a reference to the given NullableString and assigns it to the FacialBiometryPhoto field.
func (o *BrazilDigitalCnhInput) SetFacialBiometryPhoto(v string) {
	o.FacialBiometryPhoto.Set(&v)
}
// SetFacialBiometryPhotoNil sets the value for FacialBiometryPhoto to be an explicit nil
func (o *BrazilDigitalCnhInput) SetFacialBiometryPhotoNil() {
	o.FacialBiometryPhoto.Set(nil)
}

// UnsetFacialBiometryPhoto ensures that no value is present for FacialBiometryPhoto, not even an explicit nil
func (o *BrazilDigitalCnhInput) UnsetFacialBiometryPhoto() {
	o.FacialBiometryPhoto.Unset()
}

func (o BrazilDigitalCnhInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BrazilDigitalCnhInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpfNumber"] = o.CpfNumber
	if o.DigitalCnhFile.IsSet() {
		toSerialize["digitalCnhFile"] = o.DigitalCnhFile.Get()
	}
	if o.DigitalCnhFileContentType.IsSet() {
		toSerialize["digitalCnhFileContentType"] = o.DigitalCnhFileContentType.Get()
	}
	if o.FacialBiometryPhoto.IsSet() {
		toSerialize["facialBiometryPhoto"] = o.FacialBiometryPhoto.Get()
	}
	return toSerialize, nil
}

func (o *BrazilDigitalCnhInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpfNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBrazilDigitalCnhInput := _BrazilDigitalCnhInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBrazilDigitalCnhInput)

	if err != nil {
		return err
	}

	*o = BrazilDigitalCnhInput(varBrazilDigitalCnhInput)

	return err
}

type NullableBrazilDigitalCnhInput struct {
	value *BrazilDigitalCnhInput
	isSet bool
}

func (v NullableBrazilDigitalCnhInput) Get() *BrazilDigitalCnhInput {
	return v.value
}

func (v *NullableBrazilDigitalCnhInput) Set(val *BrazilDigitalCnhInput) {
	v.value = val
	v.isSet = true
}

func (v NullableBrazilDigitalCnhInput) IsSet() bool {
	return v.isSet
}

func (v *NullableBrazilDigitalCnhInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrazilDigitalCnhInput(val *BrazilDigitalCnhInput) *NullableBrazilDigitalCnhInput {
	return &NullableBrazilDigitalCnhInput{value: val, isSet: true}
}

func (v NullableBrazilDigitalCnhInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrazilDigitalCnhInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


