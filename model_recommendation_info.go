/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the RecommendationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecommendationInfo{}

// RecommendationInfo Information relating to a user; used to generated Identity Provider recommendations.
type RecommendationInfo struct {
	// The phone number of the user you wish to generate a recommendation for.              Will be used to look up the user's identity in the network, as well as to determine the user's geographic location.
	PhoneNumber NullableString `json:"phoneNumber,omitempty"`
	// A list of countries, in alpha-2 ISO 3166 format, which the user is related to.              This can include the user's country of residence, nationality, etc.
	Countries []string `json:"countries,omitempty"`
	// If one of the countries has subdivisions (for example: US states), specify those related to the user here (e.g., CA, UT, NY)
	Subdivisions []string `json:"subdivisions,omitempty"`
	// Any IP addresses related to the user.              Will be used to determine the user's geographic location.
	IpAddresses []string `json:"ipAddresses,omitempty"`
}

// NewRecommendationInfo instantiates a new RecommendationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendationInfo() *RecommendationInfo {
	this := RecommendationInfo{}
	return &this
}

// NewRecommendationInfoWithDefaults instantiates a new RecommendationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendationInfoWithDefaults() *RecommendationInfo {
	this := RecommendationInfo{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendationInfo) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecommendationInfo) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *RecommendationInfo) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *RecommendationInfo) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *RecommendationInfo) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *RecommendationInfo) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetCountries returns the Countries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendationInfo) GetCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecommendationInfo) GetCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *RecommendationInfo) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *RecommendationInfo) SetCountries(v []string) {
	o.Countries = v
}

// GetSubdivisions returns the Subdivisions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendationInfo) GetSubdivisions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Subdivisions
}

// GetSubdivisionsOk returns a tuple with the Subdivisions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecommendationInfo) GetSubdivisionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subdivisions) {
		return nil, false
	}
	return o.Subdivisions, true
}

// HasSubdivisions returns a boolean if a field has been set.
func (o *RecommendationInfo) HasSubdivisions() bool {
	if o != nil && !IsNil(o.Subdivisions) {
		return true
	}

	return false
}

// SetSubdivisions gets a reference to the given []string and assigns it to the Subdivisions field.
func (o *RecommendationInfo) SetSubdivisions(v []string) {
	o.Subdivisions = v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendationInfo) GetIpAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecommendationInfo) GetIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *RecommendationInfo) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *RecommendationInfo) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

func (o RecommendationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecommendationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PhoneNumber.IsSet() {
		toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	}
	if o.Countries != nil {
		toSerialize["countries"] = o.Countries
	}
	if o.Subdivisions != nil {
		toSerialize["subdivisions"] = o.Subdivisions
	}
	if o.IpAddresses != nil {
		toSerialize["ipAddresses"] = o.IpAddresses
	}
	return toSerialize, nil
}

type NullableRecommendationInfo struct {
	value *RecommendationInfo
	isSet bool
}

func (v NullableRecommendationInfo) Get() *RecommendationInfo {
	return v.value
}

func (v *NullableRecommendationInfo) Set(val *RecommendationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendationInfo(val *RecommendationInfo) *NullableRecommendationInfo {
	return &NullableRecommendationInfo{value: val, isSet: true}
}

func (v NullableRecommendationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


