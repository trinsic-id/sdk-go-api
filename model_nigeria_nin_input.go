/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NigeriaNinInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NigeriaNinInput{}

// NigeriaNinInput struct for NigeriaNinInput
type NigeriaNinInput struct {
	// The user's first name as it appears in their National ID
	FirstName string `json:"firstName"`
	// The user's middle name as it appears in their National ID (optional)
	MiddleName NullableString `json:"middleName,omitempty"`
	// The user's last name as it appears in their National ID (optional)
	LastName string `json:"lastName"`
	// The user's phone number (optional)
	PhoneNumber NullableString `json:"phoneNumber,omitempty"`
	// The user's date of birth, in `YYYY-MM-DD` format
	DateOfBirth string `json:"dateOfBirth"`
	// The user's gender as it appears in their National ID (e.g., male, female)
	Gender NullableString `json:"gender,omitempty"`
	// The user's South African National ID number
	NationalIdNumber string `json:"nationalIdNumber" validate:"regexp=^\\\\d*$"`
}

type _NigeriaNinInput NigeriaNinInput

// NewNigeriaNinInput instantiates a new NigeriaNinInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNigeriaNinInput(firstName string, lastName string, dateOfBirth string, nationalIdNumber string) *NigeriaNinInput {
	this := NigeriaNinInput{}
	this.FirstName = firstName
	this.LastName = lastName
	this.DateOfBirth = dateOfBirth
	this.NationalIdNumber = nationalIdNumber
	return &this
}

// NewNigeriaNinInputWithDefaults instantiates a new NigeriaNinInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNigeriaNinInputWithDefaults() *NigeriaNinInput {
	this := NigeriaNinInput{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *NigeriaNinInput) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *NigeriaNinInput) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *NigeriaNinInput) SetFirstName(v string) {
	o.FirstName = v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NigeriaNinInput) GetMiddleName() string {
	if o == nil || IsNil(o.MiddleName.Get()) {
		var ret string
		return ret
	}
	return *o.MiddleName.Get()
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NigeriaNinInput) GetMiddleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MiddleName.Get(), o.MiddleName.IsSet()
}

// HasMiddleName returns a boolean if a field has been set.
func (o *NigeriaNinInput) HasMiddleName() bool {
	if o != nil && o.MiddleName.IsSet() {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given NullableString and assigns it to the MiddleName field.
func (o *NigeriaNinInput) SetMiddleName(v string) {
	o.MiddleName.Set(&v)
}
// SetMiddleNameNil sets the value for MiddleName to be an explicit nil
func (o *NigeriaNinInput) SetMiddleNameNil() {
	o.MiddleName.Set(nil)
}

// UnsetMiddleName ensures that no value is present for MiddleName, not even an explicit nil
func (o *NigeriaNinInput) UnsetMiddleName() {
	o.MiddleName.Unset()
}

// GetLastName returns the LastName field value
func (o *NigeriaNinInput) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *NigeriaNinInput) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *NigeriaNinInput) SetLastName(v string) {
	o.LastName = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NigeriaNinInput) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NigeriaNinInput) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *NigeriaNinInput) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *NigeriaNinInput) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *NigeriaNinInput) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *NigeriaNinInput) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *NigeriaNinInput) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *NigeriaNinInput) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *NigeriaNinInput) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NigeriaNinInput) GetGender() string {
	if o == nil || IsNil(o.Gender.Get()) {
		var ret string
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NigeriaNinInput) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *NigeriaNinInput) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableString and assigns it to the Gender field.
func (o *NigeriaNinInput) SetGender(v string) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *NigeriaNinInput) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *NigeriaNinInput) UnsetGender() {
	o.Gender.Unset()
}

// GetNationalIdNumber returns the NationalIdNumber field value
func (o *NigeriaNinInput) GetNationalIdNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NationalIdNumber
}

// GetNationalIdNumberOk returns a tuple with the NationalIdNumber field value
// and a boolean to check if the value has been set.
func (o *NigeriaNinInput) GetNationalIdNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NationalIdNumber, true
}

// SetNationalIdNumber sets field value
func (o *NigeriaNinInput) SetNationalIdNumber(v string) {
	o.NationalIdNumber = v
}

func (o NigeriaNinInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NigeriaNinInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firstName"] = o.FirstName
	if o.MiddleName.IsSet() {
		toSerialize["middleName"] = o.MiddleName.Get()
	}
	toSerialize["lastName"] = o.LastName
	if o.PhoneNumber.IsSet() {
		toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	}
	toSerialize["dateOfBirth"] = o.DateOfBirth
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	toSerialize["nationalIdNumber"] = o.NationalIdNumber
	return toSerialize, nil
}

func (o *NigeriaNinInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firstName",
		"lastName",
		"dateOfBirth",
		"nationalIdNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNigeriaNinInput := _NigeriaNinInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNigeriaNinInput)

	if err != nil {
		return err
	}

	*o = NigeriaNinInput(varNigeriaNinInput)

	return err
}

type NullableNigeriaNinInput struct {
	value *NigeriaNinInput
	isSet bool
}

func (v NullableNigeriaNinInput) Get() *NigeriaNinInput {
	return v.value
}

func (v *NullableNigeriaNinInput) Set(val *NigeriaNinInput) {
	v.value = val
	v.isSet = true
}

func (v NullableNigeriaNinInput) IsSet() bool {
	return v.isSet
}

func (v *NullableNigeriaNinInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNigeriaNinInput(val *NigeriaNinInput) *NullableNigeriaNinInput {
	return &NullableNigeriaNinInput{value: val, isSet: true}
}

func (v NullableNigeriaNinInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNigeriaNinInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


