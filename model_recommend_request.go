/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecommendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecommendRequest{}

// RecommendRequest struct for RecommendRequest
type RecommendRequest struct {
	// The phone number of the user you whish to generate a recommendation for. Will be used to lookup the user's identity in the network
	PhoneNumber string `json:"phoneNumber"`
	// A list of countries, in alpha-2 ISO 3166 format, you wish to specify for the recommendation, this can include the user's country of residence, nationality, etc.
	Countries []string `json:"countries,omitempty"`
	// If one of the countries is US, you can specify a list of US states to further refine the recommendation (e.g., CA, UT, NY)
	States []string `json:"states,omitempty"`
}

type _RecommendRequest RecommendRequest

// NewRecommendRequest instantiates a new RecommendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendRequest(phoneNumber string) *RecommendRequest {
	this := RecommendRequest{}
	this.PhoneNumber = phoneNumber
	return &this
}

// NewRecommendRequestWithDefaults instantiates a new RecommendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendRequestWithDefaults() *RecommendRequest {
	this := RecommendRequest{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value
func (o *RecommendRequest) GetPhoneNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value
// and a boolean to check if the value has been set.
func (o *RecommendRequest) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhoneNumber, true
}

// SetPhoneNumber sets field value
func (o *RecommendRequest) SetPhoneNumber(v string) {
	o.PhoneNumber = v
}

// GetCountries returns the Countries field value if set, zero value otherwise.
func (o *RecommendRequest) GetCountries() []string {
	if o == nil || IsNil(o.Countries) {
		var ret []string
		return ret
	}
	return o.Countries
}

// GetCountriesOk returns a tuple with the Countries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendRequest) GetCountriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Countries) {
		return nil, false
	}
	return o.Countries, true
}

// HasCountries returns a boolean if a field has been set.
func (o *RecommendRequest) HasCountries() bool {
	if o != nil && !IsNil(o.Countries) {
		return true
	}

	return false
}

// SetCountries gets a reference to the given []string and assigns it to the Countries field.
func (o *RecommendRequest) SetCountries(v []string) {
	o.Countries = v
}

// GetStates returns the States field value if set, zero value otherwise.
func (o *RecommendRequest) GetStates() []string {
	if o == nil || IsNil(o.States) {
		var ret []string
		return ret
	}
	return o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendRequest) GetStatesOk() ([]string, bool) {
	if o == nil || IsNil(o.States) {
		return nil, false
	}
	return o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *RecommendRequest) HasStates() bool {
	if o != nil && !IsNil(o.States) {
		return true
	}

	return false
}

// SetStates gets a reference to the given []string and assigns it to the States field.
func (o *RecommendRequest) SetStates(v []string) {
	o.States = v
}

func (o RecommendRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecommendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["phoneNumber"] = o.PhoneNumber
	if !IsNil(o.Countries) {
		toSerialize["countries"] = o.Countries
	}
	if !IsNil(o.States) {
		toSerialize["states"] = o.States
	}
	return toSerialize, nil
}

func (o *RecommendRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"phoneNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecommendRequest := _RecommendRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecommendRequest)

	if err != nil {
		return err
	}

	*o = RecommendRequest(varRecommendRequest)

	return err
}

type NullableRecommendRequest struct {
	value *RecommendRequest
	isSet bool
}

func (v NullableRecommendRequest) Get() *RecommendRequest {
	return v.value
}

func (v *NullableRecommendRequest) Set(val *RecommendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendRequest(val *RecommendRequest) *NullableRecommendRequest {
	return &NullableRecommendRequest{value: val, isSet: true}
}

func (v NullableRecommendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


