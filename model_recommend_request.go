/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the RecommendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecommendRequest{}

// RecommendRequest struct for RecommendRequest
type RecommendRequest struct {
	// Information about the user you wish to generate a recommendation for.
	RecommendationInfo NullableRecommendationInfo `json:"recommendationInfo,omitempty"`
	// Filter providers by health status. Valid values: \"online\", \"offline\", \"all\". Defaults to \"online\".
	Health NullableString `json:"health,omitempty"`
}

// NewRecommendRequest instantiates a new RecommendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendRequest() *RecommendRequest {
	this := RecommendRequest{}
	return &this
}

// NewRecommendRequestWithDefaults instantiates a new RecommendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendRequestWithDefaults() *RecommendRequest {
	this := RecommendRequest{}
	return &this
}

// GetRecommendationInfo returns the RecommendationInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendRequest) GetRecommendationInfo() RecommendationInfo {
	if o == nil || IsNil(o.RecommendationInfo.Get()) {
		var ret RecommendationInfo
		return ret
	}
	return *o.RecommendationInfo.Get()
}

// GetRecommendationInfoOk returns a tuple with the RecommendationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecommendRequest) GetRecommendationInfoOk() (*RecommendationInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecommendationInfo.Get(), o.RecommendationInfo.IsSet()
}

// HasRecommendationInfo returns a boolean if a field has been set.
func (o *RecommendRequest) HasRecommendationInfo() bool {
	if o != nil && o.RecommendationInfo.IsSet() {
		return true
	}

	return false
}

// SetRecommendationInfo gets a reference to the given NullableRecommendationInfo and assigns it to the RecommendationInfo field.
func (o *RecommendRequest) SetRecommendationInfo(v RecommendationInfo) {
	o.RecommendationInfo.Set(&v)
}
// SetRecommendationInfoNil sets the value for RecommendationInfo to be an explicit nil
func (o *RecommendRequest) SetRecommendationInfoNil() {
	o.RecommendationInfo.Set(nil)
}

// UnsetRecommendationInfo ensures that no value is present for RecommendationInfo, not even an explicit nil
func (o *RecommendRequest) UnsetRecommendationInfo() {
	o.RecommendationInfo.Unset()
}

// GetHealth returns the Health field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecommendRequest) GetHealth() string {
	if o == nil || IsNil(o.Health.Get()) {
		var ret string
		return ret
	}
	return *o.Health.Get()
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecommendRequest) GetHealthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Health.Get(), o.Health.IsSet()
}

// HasHealth returns a boolean if a field has been set.
func (o *RecommendRequest) HasHealth() bool {
	if o != nil && o.Health.IsSet() {
		return true
	}

	return false
}

// SetHealth gets a reference to the given NullableString and assigns it to the Health field.
func (o *RecommendRequest) SetHealth(v string) {
	o.Health.Set(&v)
}
// SetHealthNil sets the value for Health to be an explicit nil
func (o *RecommendRequest) SetHealthNil() {
	o.Health.Set(nil)
}

// UnsetHealth ensures that no value is present for Health, not even an explicit nil
func (o *RecommendRequest) UnsetHealth() {
	o.Health.Unset()
}

func (o RecommendRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecommendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RecommendationInfo.IsSet() {
		toSerialize["recommendationInfo"] = o.RecommendationInfo.Get()
	}
	if o.Health.IsSet() {
		toSerialize["health"] = o.Health.Get()
	}
	return toSerialize, nil
}

type NullableRecommendRequest struct {
	value *RecommendRequest
	isSet bool
}

func (v NullableRecommendRequest) Get() *RecommendRequest {
	return v.value
}

func (v *NullableRecommendRequest) Set(val *RecommendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendRequest(val *RecommendRequest) *NullableRecommendRequest {
	return &NullableRecommendRequest{value: val, isSet: true}
}

func (v NullableRecommendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


