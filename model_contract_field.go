/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractField{}

// ContractField Information about a field that a Provider will return in verification results.
type ContractField struct {
	// The name of the field as it appears in verification results.
	Name string `json:"name"`
	// Indicates when this field will be present in verification results.
	Outputted FieldAvailability `json:"outputted"`
}

type _ContractField ContractField

// NewContractField instantiates a new ContractField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractField(name string, outputted FieldAvailability) *ContractField {
	this := ContractField{}
	this.Name = name
	this.Outputted = outputted
	return &this
}

// NewContractFieldWithDefaults instantiates a new ContractField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractFieldWithDefaults() *ContractField {
	this := ContractField{}
	return &this
}

// GetName returns the Name field value
func (o *ContractField) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContractField) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContractField) SetName(v string) {
	o.Name = v
}

// GetOutputted returns the Outputted field value
func (o *ContractField) GetOutputted() FieldAvailability {
	if o == nil {
		var ret FieldAvailability
		return ret
	}

	return o.Outputted
}

// GetOutputtedOk returns a tuple with the Outputted field value
// and a boolean to check if the value has been set.
func (o *ContractField) GetOutputtedOk() (*FieldAvailability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Outputted, true
}

// SetOutputted sets field value
func (o *ContractField) SetOutputted(v FieldAvailability) {
	o.Outputted = v
}

func (o ContractField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["outputted"] = o.Outputted
	return toSerialize, nil
}

func (o *ContractField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"outputted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractField := _ContractField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractField)

	if err != nil {
		return err
	}

	*o = ContractField(varContractField)

	return err
}

type NullableContractField struct {
	value *ContractField
	isSet bool
}

func (v NullableContractField) Get() *ContractField {
	return v.value
}

func (v *NullableContractField) Set(val *ContractField) {
	v.value = val
	v.isSet = true
}

func (v NullableContractField) IsSet() bool {
	return v.isSet
}

func (v *NullableContractField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractField(val *ContractField) *NullableContractField {
	return &NullableContractField{value: val, isSet: true}
}

func (v NullableContractField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


