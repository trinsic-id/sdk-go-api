/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SouthAfricaNidInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SouthAfricaNidInput{}

// SouthAfricaNidInput struct for SouthAfricaNidInput
type SouthAfricaNidInput struct {
	// The user's full name as it appears in their National ID
	FullName string `json:"fullName"`
	// The user's date of birth, in `YYYY-MM-DD` format
	DateOfBirth string `json:"dateOfBirth"`
	// The user's gender as it appears in their National ID (e.g., male, female)
	Gender string `json:"gender"`
	// The user's South African National ID number
	NationalIdNumber string `json:"nationalIdNumber" validate:"regexp=^\\\\d*$"`
}

type _SouthAfricaNidInput SouthAfricaNidInput

// NewSouthAfricaNidInput instantiates a new SouthAfricaNidInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSouthAfricaNidInput(fullName string, dateOfBirth string, gender string, nationalIdNumber string) *SouthAfricaNidInput {
	this := SouthAfricaNidInput{}
	this.FullName = fullName
	this.DateOfBirth = dateOfBirth
	this.Gender = gender
	this.NationalIdNumber = nationalIdNumber
	return &this
}

// NewSouthAfricaNidInputWithDefaults instantiates a new SouthAfricaNidInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSouthAfricaNidInputWithDefaults() *SouthAfricaNidInput {
	this := SouthAfricaNidInput{}
	return &this
}

// GetFullName returns the FullName field value
func (o *SouthAfricaNidInput) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *SouthAfricaNidInput) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *SouthAfricaNidInput) SetFullName(v string) {
	o.FullName = v
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *SouthAfricaNidInput) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *SouthAfricaNidInput) GetDateOfBirthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *SouthAfricaNidInput) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetGender returns the Gender field value
func (o *SouthAfricaNidInput) GetGender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gender
}

// GetGenderOk returns a tuple with the Gender field value
// and a boolean to check if the value has been set.
func (o *SouthAfricaNidInput) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gender, true
}

// SetGender sets field value
func (o *SouthAfricaNidInput) SetGender(v string) {
	o.Gender = v
}

// GetNationalIdNumber returns the NationalIdNumber field value
func (o *SouthAfricaNidInput) GetNationalIdNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NationalIdNumber
}

// GetNationalIdNumberOk returns a tuple with the NationalIdNumber field value
// and a boolean to check if the value has been set.
func (o *SouthAfricaNidInput) GetNationalIdNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NationalIdNumber, true
}

// SetNationalIdNumber sets field value
func (o *SouthAfricaNidInput) SetNationalIdNumber(v string) {
	o.NationalIdNumber = v
}

func (o SouthAfricaNidInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SouthAfricaNidInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fullName"] = o.FullName
	toSerialize["dateOfBirth"] = o.DateOfBirth
	toSerialize["gender"] = o.Gender
	toSerialize["nationalIdNumber"] = o.NationalIdNumber
	return toSerialize, nil
}

func (o *SouthAfricaNidInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fullName",
		"dateOfBirth",
		"gender",
		"nationalIdNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSouthAfricaNidInput := _SouthAfricaNidInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSouthAfricaNidInput)

	if err != nil {
		return err
	}

	*o = SouthAfricaNidInput(varSouthAfricaNidInput)

	return err
}

type NullableSouthAfricaNidInput struct {
	value *SouthAfricaNidInput
	isSet bool
}

func (v NullableSouthAfricaNidInput) Get() *SouthAfricaNidInput {
	return v.value
}

func (v *NullableSouthAfricaNidInput) Set(val *SouthAfricaNidInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSouthAfricaNidInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSouthAfricaNidInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSouthAfricaNidInput(val *SouthAfricaNidInput) *NullableSouthAfricaNidInput {
	return &NullableSouthAfricaNidInput{value: val, isSet: true}
}

func (v NullableSouthAfricaNidInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSouthAfricaNidInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


