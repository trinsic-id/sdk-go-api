/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the Match type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Match{}

// Match struct for Match
type Match struct {
	ProbabilityValue NullableFloat64 `json:"probabilityValue,omitempty"`
	BooleanValue NullableBool `json:"booleanValue,omitempty"`
}

// NewMatch instantiates a new Match object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatch() *Match {
	this := Match{}
	return &this
}

// NewMatchWithDefaults instantiates a new Match object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchWithDefaults() *Match {
	this := Match{}
	return &this
}

// GetProbabilityValue returns the ProbabilityValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Match) GetProbabilityValue() float64 {
	if o == nil || IsNil(o.ProbabilityValue.Get()) {
		var ret float64
		return ret
	}
	return *o.ProbabilityValue.Get()
}

// GetProbabilityValueOk returns a tuple with the ProbabilityValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Match) GetProbabilityValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProbabilityValue.Get(), o.ProbabilityValue.IsSet()
}

// HasProbabilityValue returns a boolean if a field has been set.
func (o *Match) HasProbabilityValue() bool {
	if o != nil && o.ProbabilityValue.IsSet() {
		return true
	}

	return false
}

// SetProbabilityValue gets a reference to the given NullableFloat64 and assigns it to the ProbabilityValue field.
func (o *Match) SetProbabilityValue(v float64) {
	o.ProbabilityValue.Set(&v)
}
// SetProbabilityValueNil sets the value for ProbabilityValue to be an explicit nil
func (o *Match) SetProbabilityValueNil() {
	o.ProbabilityValue.Set(nil)
}

// UnsetProbabilityValue ensures that no value is present for ProbabilityValue, not even an explicit nil
func (o *Match) UnsetProbabilityValue() {
	o.ProbabilityValue.Unset()
}

// GetBooleanValue returns the BooleanValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Match) GetBooleanValue() bool {
	if o == nil || IsNil(o.BooleanValue.Get()) {
		var ret bool
		return ret
	}
	return *o.BooleanValue.Get()
}

// GetBooleanValueOk returns a tuple with the BooleanValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Match) GetBooleanValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BooleanValue.Get(), o.BooleanValue.IsSet()
}

// HasBooleanValue returns a boolean if a field has been set.
func (o *Match) HasBooleanValue() bool {
	if o != nil && o.BooleanValue.IsSet() {
		return true
	}

	return false
}

// SetBooleanValue gets a reference to the given NullableBool and assigns it to the BooleanValue field.
func (o *Match) SetBooleanValue(v bool) {
	o.BooleanValue.Set(&v)
}
// SetBooleanValueNil sets the value for BooleanValue to be an explicit nil
func (o *Match) SetBooleanValueNil() {
	o.BooleanValue.Set(nil)
}

// UnsetBooleanValue ensures that no value is present for BooleanValue, not even an explicit nil
func (o *Match) UnsetBooleanValue() {
	o.BooleanValue.Unset()
}

func (o Match) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Match) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProbabilityValue.IsSet() {
		toSerialize["probabilityValue"] = o.ProbabilityValue.Get()
	}
	if o.BooleanValue.IsSet() {
		toSerialize["booleanValue"] = o.BooleanValue.Get()
	}
	return toSerialize, nil
}

type NullableMatch struct {
	value *Match
	isSet bool
}

func (v NullableMatch) Get() *Match {
	return v.value
}

func (v *NullableMatch) Set(val *Match) {
	v.value = val
	v.isSet = true
}

func (v NullableMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatch(val *Match) *NullableMatch {
	return &NullableMatch{value: val, isSet: true}
}

func (v NullableMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


