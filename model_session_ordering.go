/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// SessionOrdering the model 'SessionOrdering'
type SessionOrdering string

// List of SessionOrdering
const (
	SESSIONORDERING_CREATED SessionOrdering = "Created"
	SESSIONORDERING_UPDATED SessionOrdering = "Updated"
	SESSIONORDERING_STATE SessionOrdering = "State"
)

// All allowed values of SessionOrdering enum
var AllowedSessionOrderingEnumValues = []SessionOrdering{
	"Created",
	"Updated",
	"State",
}

func (v *SessionOrdering) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SessionOrdering(value)
	for _, existing := range AllowedSessionOrderingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SessionOrdering", value)
}

// NewSessionOrderingFromValue returns a pointer to a valid SessionOrdering
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSessionOrderingFromValue(v string) (*SessionOrdering, error) {
	ev := SessionOrdering(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SessionOrdering: valid values are %v", v, AllowedSessionOrderingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SessionOrdering) IsValid() bool {
	for _, existing := range AllowedSessionOrderingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SessionOrdering value
func (v SessionOrdering) Ptr() *SessionOrdering {
	return &v
}

type NullableSessionOrdering struct {
	value *SessionOrdering
	isSet bool
}

func (v NullableSessionOrdering) Get() *SessionOrdering {
	return v.value
}

func (v *NullableSessionOrdering) Set(val *SessionOrdering) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionOrdering) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionOrdering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionOrdering(val *SessionOrdering) *NullableSessionOrdering {
	return &NullableSessionOrdering{value: val, isSet: true}
}

func (v NullableSessionOrdering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionOrdering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

