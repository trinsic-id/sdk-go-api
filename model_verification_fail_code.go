/*
Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// VerificationFailCode the model 'VerificationFailCode'
type VerificationFailCode string

// List of VerificationFailCode
const (
	VERIFICATION_FAIL_NONE VerificationFailCode = "VerificationFailNone"
	VERIFICATION_FAIL_INTERNAL VerificationFailCode = "VerificationFailInternal"
	VERIFICATION_FAIL_INVALID_IMAGE VerificationFailCode = "VerificationFailInvalidImage"
	VERIFICATION_FAIL_INAUTHENTIC VerificationFailCode = "VerificationFailInauthentic"
	VERIFICATION_FAIL_UNSUPPORTED_DOCUMENT VerificationFailCode = "VerificationFailUnsupportedDocument"
	VERIFICATION_FAIL_USER_ABANDONED VerificationFailCode = "VerificationFailUserAbandoned"
)

// All allowed values of VerificationFailCode enum
var AllowedVerificationFailCodeEnumValues = []VerificationFailCode{
	"VerificationFailNone",
	"VerificationFailInternal",
	"VerificationFailInvalidImage",
	"VerificationFailInauthentic",
	"VerificationFailUnsupportedDocument",
	"VerificationFailUserAbandoned",
}

func (v *VerificationFailCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationFailCode(value)
	for _, existing := range AllowedVerificationFailCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationFailCode", value)
}

// NewVerificationFailCodeFromValue returns a pointer to a valid VerificationFailCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerificationFailCodeFromValue(v string) (*VerificationFailCode, error) {
	ev := VerificationFailCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerificationFailCode: valid values are %v", v, AllowedVerificationFailCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerificationFailCode) IsValid() bool {
	for _, existing := range AllowedVerificationFailCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VerificationFailCode value
func (v VerificationFailCode) Ptr() *VerificationFailCode {
	return &v
}

type NullableVerificationFailCode struct {
	value *VerificationFailCode
	isSet bool
}

func (v NullableVerificationFailCode) Get() *VerificationFailCode {
	return v.value
}

func (v *NullableVerificationFailCode) Set(val *VerificationFailCode) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationFailCode) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationFailCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationFailCode(val *VerificationFailCode) *NullableVerificationFailCode {
	return &NullableVerificationFailCode{value: val, isSet: true}
}

func (v NullableVerificationFailCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationFailCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

