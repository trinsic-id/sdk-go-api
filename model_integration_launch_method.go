/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// IntegrationLaunchMethod the model 'IntegrationLaunchMethod'
type IntegrationLaunchMethod string

// List of IntegrationLaunchMethod
const (
	INTEGRATIONLAUNCHMETHOD_LAUNCH_BROWSER IntegrationLaunchMethod = "LaunchBrowser"
	INTEGRATIONLAUNCHMETHOD_POLL_RESULT IntegrationLaunchMethod = "PollResult"
	INTEGRATIONLAUNCHMETHOD_DEEPLINK_TO_MOBILE IntegrationLaunchMethod = "DeeplinkToMobile"
	INTEGRATIONLAUNCHMETHOD_SHOW_CONTENT IntegrationLaunchMethod = "ShowContent"
)

// All allowed values of IntegrationLaunchMethod enum
var AllowedIntegrationLaunchMethodEnumValues = []IntegrationLaunchMethod{
	"LaunchBrowser",
	"PollResult",
	"DeeplinkToMobile",
	"ShowContent",
}

func (v *IntegrationLaunchMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntegrationLaunchMethod(value)
	for _, existing := range AllowedIntegrationLaunchMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntegrationLaunchMethod", value)
}

// NewIntegrationLaunchMethodFromValue returns a pointer to a valid IntegrationLaunchMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntegrationLaunchMethodFromValue(v string) (*IntegrationLaunchMethod, error) {
	ev := IntegrationLaunchMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntegrationLaunchMethod: valid values are %v", v, AllowedIntegrationLaunchMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntegrationLaunchMethod) IsValid() bool {
	for _, existing := range AllowedIntegrationLaunchMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntegrationLaunchMethod value
func (v IntegrationLaunchMethod) Ptr() *IntegrationLaunchMethod {
	return &v
}

type NullableIntegrationLaunchMethod struct {
	value *IntegrationLaunchMethod
	isSet bool
}

func (v NullableIntegrationLaunchMethod) Get() *IntegrationLaunchMethod {
	return v.value
}

func (v *NullableIntegrationLaunchMethod) Set(val *IntegrationLaunchMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationLaunchMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationLaunchMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationLaunchMethod(val *IntegrationLaunchMethod) *NullableIntegrationLaunchMethod {
	return &NullableIntegrationLaunchMethod{value: val, isSet: true}
}

func (v NullableIntegrationLaunchMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationLaunchMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

