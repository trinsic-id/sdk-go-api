/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
)

// checks if the MatchData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchData{}

// MatchData struct for MatchData
type MatchData struct {
	NationalIdNumber NullableMatch `json:"nationalIdNumber,omitempty"`
	FullName NullableMatch `json:"fullName,omitempty"`
	GivenName NullableMatch `json:"givenName,omitempty"`
	MiddleName NullableMatch `json:"middleName,omitempty"`
	FamilyName NullableMatch `json:"familyName,omitempty"`
	Sex NullableMatch `json:"sex,omitempty"`
	DateOfBirth NullableMatch `json:"dateOfBirth,omitempty"`
	FaceMatch NullableMatch `json:"faceMatch,omitempty"`
	Liveness NullableMatch `json:"liveness,omitempty"`
	ImageAuthenticity NullableMatch `json:"imageAuthenticity,omitempty"`
}

// NewMatchData instantiates a new MatchData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchData() *MatchData {
	this := MatchData{}
	return &this
}

// NewMatchDataWithDefaults instantiates a new MatchData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchDataWithDefaults() *MatchData {
	this := MatchData{}
	return &this
}

// GetNationalIdNumber returns the NationalIdNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetNationalIdNumber() Match {
	if o == nil || IsNil(o.NationalIdNumber.Get()) {
		var ret Match
		return ret
	}
	return *o.NationalIdNumber.Get()
}

// GetNationalIdNumberOk returns a tuple with the NationalIdNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetNationalIdNumberOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.NationalIdNumber.Get(), o.NationalIdNumber.IsSet()
}

// HasNationalIdNumber returns a boolean if a field has been set.
func (o *MatchData) HasNationalIdNumber() bool {
	if o != nil && o.NationalIdNumber.IsSet() {
		return true
	}

	return false
}

// SetNationalIdNumber gets a reference to the given NullableMatch and assigns it to the NationalIdNumber field.
func (o *MatchData) SetNationalIdNumber(v Match) {
	o.NationalIdNumber.Set(&v)
}
// SetNationalIdNumberNil sets the value for NationalIdNumber to be an explicit nil
func (o *MatchData) SetNationalIdNumberNil() {
	o.NationalIdNumber.Set(nil)
}

// UnsetNationalIdNumber ensures that no value is present for NationalIdNumber, not even an explicit nil
func (o *MatchData) UnsetNationalIdNumber() {
	o.NationalIdNumber.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetFullName() Match {
	if o == nil || IsNil(o.FullName.Get()) {
		var ret Match
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetFullNameOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *MatchData) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableMatch and assigns it to the FullName field.
func (o *MatchData) SetFullName(v Match) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *MatchData) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *MatchData) UnsetFullName() {
	o.FullName.Unset()
}

// GetGivenName returns the GivenName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetGivenName() Match {
	if o == nil || IsNil(o.GivenName.Get()) {
		var ret Match
		return ret
	}
	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetGivenNameOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// HasGivenName returns a boolean if a field has been set.
func (o *MatchData) HasGivenName() bool {
	if o != nil && o.GivenName.IsSet() {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given NullableMatch and assigns it to the GivenName field.
func (o *MatchData) SetGivenName(v Match) {
	o.GivenName.Set(&v)
}
// SetGivenNameNil sets the value for GivenName to be an explicit nil
func (o *MatchData) SetGivenNameNil() {
	o.GivenName.Set(nil)
}

// UnsetGivenName ensures that no value is present for GivenName, not even an explicit nil
func (o *MatchData) UnsetGivenName() {
	o.GivenName.Unset()
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetMiddleName() Match {
	if o == nil || IsNil(o.MiddleName.Get()) {
		var ret Match
		return ret
	}
	return *o.MiddleName.Get()
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetMiddleNameOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.MiddleName.Get(), o.MiddleName.IsSet()
}

// HasMiddleName returns a boolean if a field has been set.
func (o *MatchData) HasMiddleName() bool {
	if o != nil && o.MiddleName.IsSet() {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given NullableMatch and assigns it to the MiddleName field.
func (o *MatchData) SetMiddleName(v Match) {
	o.MiddleName.Set(&v)
}
// SetMiddleNameNil sets the value for MiddleName to be an explicit nil
func (o *MatchData) SetMiddleNameNil() {
	o.MiddleName.Set(nil)
}

// UnsetMiddleName ensures that no value is present for MiddleName, not even an explicit nil
func (o *MatchData) UnsetMiddleName() {
	o.MiddleName.Unset()
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetFamilyName() Match {
	if o == nil || IsNil(o.FamilyName.Get()) {
		var ret Match
		return ret
	}
	return *o.FamilyName.Get()
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetFamilyNameOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.FamilyName.Get(), o.FamilyName.IsSet()
}

// HasFamilyName returns a boolean if a field has been set.
func (o *MatchData) HasFamilyName() bool {
	if o != nil && o.FamilyName.IsSet() {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given NullableMatch and assigns it to the FamilyName field.
func (o *MatchData) SetFamilyName(v Match) {
	o.FamilyName.Set(&v)
}
// SetFamilyNameNil sets the value for FamilyName to be an explicit nil
func (o *MatchData) SetFamilyNameNil() {
	o.FamilyName.Set(nil)
}

// UnsetFamilyName ensures that no value is present for FamilyName, not even an explicit nil
func (o *MatchData) UnsetFamilyName() {
	o.FamilyName.Unset()
}

// GetSex returns the Sex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetSex() Match {
	if o == nil || IsNil(o.Sex.Get()) {
		var ret Match
		return ret
	}
	return *o.Sex.Get()
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetSexOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sex.Get(), o.Sex.IsSet()
}

// HasSex returns a boolean if a field has been set.
func (o *MatchData) HasSex() bool {
	if o != nil && o.Sex.IsSet() {
		return true
	}

	return false
}

// SetSex gets a reference to the given NullableMatch and assigns it to the Sex field.
func (o *MatchData) SetSex(v Match) {
	o.Sex.Set(&v)
}
// SetSexNil sets the value for Sex to be an explicit nil
func (o *MatchData) SetSexNil() {
	o.Sex.Set(nil)
}

// UnsetSex ensures that no value is present for Sex, not even an explicit nil
func (o *MatchData) UnsetSex() {
	o.Sex.Unset()
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetDateOfBirth() Match {
	if o == nil || IsNil(o.DateOfBirth.Get()) {
		var ret Match
		return ret
	}
	return *o.DateOfBirth.Get()
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetDateOfBirthOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateOfBirth.Get(), o.DateOfBirth.IsSet()
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *MatchData) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth.IsSet() {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given NullableMatch and assigns it to the DateOfBirth field.
func (o *MatchData) SetDateOfBirth(v Match) {
	o.DateOfBirth.Set(&v)
}
// SetDateOfBirthNil sets the value for DateOfBirth to be an explicit nil
func (o *MatchData) SetDateOfBirthNil() {
	o.DateOfBirth.Set(nil)
}

// UnsetDateOfBirth ensures that no value is present for DateOfBirth, not even an explicit nil
func (o *MatchData) UnsetDateOfBirth() {
	o.DateOfBirth.Unset()
}

// GetFaceMatch returns the FaceMatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetFaceMatch() Match {
	if o == nil || IsNil(o.FaceMatch.Get()) {
		var ret Match
		return ret
	}
	return *o.FaceMatch.Get()
}

// GetFaceMatchOk returns a tuple with the FaceMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetFaceMatchOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.FaceMatch.Get(), o.FaceMatch.IsSet()
}

// HasFaceMatch returns a boolean if a field has been set.
func (o *MatchData) HasFaceMatch() bool {
	if o != nil && o.FaceMatch.IsSet() {
		return true
	}

	return false
}

// SetFaceMatch gets a reference to the given NullableMatch and assigns it to the FaceMatch field.
func (o *MatchData) SetFaceMatch(v Match) {
	o.FaceMatch.Set(&v)
}
// SetFaceMatchNil sets the value for FaceMatch to be an explicit nil
func (o *MatchData) SetFaceMatchNil() {
	o.FaceMatch.Set(nil)
}

// UnsetFaceMatch ensures that no value is present for FaceMatch, not even an explicit nil
func (o *MatchData) UnsetFaceMatch() {
	o.FaceMatch.Unset()
}

// GetLiveness returns the Liveness field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetLiveness() Match {
	if o == nil || IsNil(o.Liveness.Get()) {
		var ret Match
		return ret
	}
	return *o.Liveness.Get()
}

// GetLivenessOk returns a tuple with the Liveness field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetLivenessOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.Liveness.Get(), o.Liveness.IsSet()
}

// HasLiveness returns a boolean if a field has been set.
func (o *MatchData) HasLiveness() bool {
	if o != nil && o.Liveness.IsSet() {
		return true
	}

	return false
}

// SetLiveness gets a reference to the given NullableMatch and assigns it to the Liveness field.
func (o *MatchData) SetLiveness(v Match) {
	o.Liveness.Set(&v)
}
// SetLivenessNil sets the value for Liveness to be an explicit nil
func (o *MatchData) SetLivenessNil() {
	o.Liveness.Set(nil)
}

// UnsetLiveness ensures that no value is present for Liveness, not even an explicit nil
func (o *MatchData) UnsetLiveness() {
	o.Liveness.Unset()
}

// GetImageAuthenticity returns the ImageAuthenticity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchData) GetImageAuthenticity() Match {
	if o == nil || IsNil(o.ImageAuthenticity.Get()) {
		var ret Match
		return ret
	}
	return *o.ImageAuthenticity.Get()
}

// GetImageAuthenticityOk returns a tuple with the ImageAuthenticity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchData) GetImageAuthenticityOk() (*Match, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageAuthenticity.Get(), o.ImageAuthenticity.IsSet()
}

// HasImageAuthenticity returns a boolean if a field has been set.
func (o *MatchData) HasImageAuthenticity() bool {
	if o != nil && o.ImageAuthenticity.IsSet() {
		return true
	}

	return false
}

// SetImageAuthenticity gets a reference to the given NullableMatch and assigns it to the ImageAuthenticity field.
func (o *MatchData) SetImageAuthenticity(v Match) {
	o.ImageAuthenticity.Set(&v)
}
// SetImageAuthenticityNil sets the value for ImageAuthenticity to be an explicit nil
func (o *MatchData) SetImageAuthenticityNil() {
	o.ImageAuthenticity.Set(nil)
}

// UnsetImageAuthenticity ensures that no value is present for ImageAuthenticity, not even an explicit nil
func (o *MatchData) UnsetImageAuthenticity() {
	o.ImageAuthenticity.Unset()
}

func (o MatchData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NationalIdNumber.IsSet() {
		toSerialize["nationalIdNumber"] = o.NationalIdNumber.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if o.GivenName.IsSet() {
		toSerialize["givenName"] = o.GivenName.Get()
	}
	if o.MiddleName.IsSet() {
		toSerialize["middleName"] = o.MiddleName.Get()
	}
	if o.FamilyName.IsSet() {
		toSerialize["familyName"] = o.FamilyName.Get()
	}
	if o.Sex.IsSet() {
		toSerialize["sex"] = o.Sex.Get()
	}
	if o.DateOfBirth.IsSet() {
		toSerialize["dateOfBirth"] = o.DateOfBirth.Get()
	}
	if o.FaceMatch.IsSet() {
		toSerialize["faceMatch"] = o.FaceMatch.Get()
	}
	if o.Liveness.IsSet() {
		toSerialize["liveness"] = o.Liveness.Get()
	}
	if o.ImageAuthenticity.IsSet() {
		toSerialize["imageAuthenticity"] = o.ImageAuthenticity.Get()
	}
	return toSerialize, nil
}

type NullableMatchData struct {
	value *MatchData
	isSet bool
}

func (v NullableMatchData) Get() *MatchData {
	return v.value
}

func (v *NullableMatchData) Set(val *MatchData) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchData) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchData(val *MatchData) *NullableMatchData {
	return &NullableMatchData{value: val, isSet: true}
}

func (v NullableMatchData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


