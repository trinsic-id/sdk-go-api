/*
Trinsic API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package trinsic_api

import (
	"encoding/json"
	"fmt"
)

// ProviderHealth The health for an integration to be able to successfully perform a verification session.
type ProviderHealth string

// List of ProviderHealth
const (
	PROVIDERHEALTH_ONLINE ProviderHealth = "Online"
	PROVIDERHEALTH_OFFLINE ProviderHealth = "Offline"
)

// All allowed values of ProviderHealth enum
var AllowedProviderHealthEnumValues = []ProviderHealth{
	"Online",
	"Offline",
}

func (v *ProviderHealth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderHealth(value)
	for _, existing := range AllowedProviderHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderHealth", value)
}

// NewProviderHealthFromValue returns a pointer to a valid ProviderHealth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderHealthFromValue(v string) (*ProviderHealth, error) {
	ev := ProviderHealth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderHealth: valid values are %v", v, AllowedProviderHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderHealth) IsValid() bool {
	for _, existing := range AllowedProviderHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProviderHealth value
func (v ProviderHealth) Ptr() *ProviderHealth {
	return &v
}

type NullableProviderHealth struct {
	value *ProviderHealth
	isSet bool
}

func (v NullableProviderHealth) Get() *ProviderHealth {
	return v.value
}

func (v *NullableProviderHealth) Set(val *ProviderHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderHealth(val *ProviderHealth) *NullableProviderHealth {
	return &NullableProviderHealth{value: val, isSet: true}
}

func (v NullableProviderHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

